================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2024-08-28T06:32:16.808Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
api/stock.js
api/user.js
app.config.json
App.vue
components/AIChatbot.vue
components/footer.vue
components/horizontal-nav.vue
components/menu.js
components/nav-bar.vue
components/page-header.vue
components/right-bar.vue
components/side-bar.vue
components/side-nav.vue
components/widgets/activity.vue
components/widgets/earning.vue
components/widgets/emailsent.vue
components/widgets/loader.vue
components/widgets/profile.vue
components/widgets/selling-product.vue
components/widgets/social-source.vue
components/widgets/stat.vue
components/widgets/transaction.vue
i18n.js
main.js
router/index.js
router/layouts/auth.vue
router/layouts/horizontal.vue
router/layouts/main.vue
router/layouts/vertical.vue
router/routes.js
router/views/account/forgot-password.vue
router/views/account/login.vue
router/views/account/register.vue
router/views/crypto/exchange/data.js
router/views/crypto/exchange/index.vue
router/views/crypto/kycapplication/index.vue
router/views/crypto/lending/index.vue
router/views/crypto/orders/data.js
router/views/crypto/orders/index.vue
router/views/crypto/wallet/index.vue
router/views/utility/404.vue
router/views/utility/500.vue
router/views/utility/data-pricing.js
router/views/utility/faqs.vue
router/views/utility/maintenance.vue
router/views/utility/pricing.vue
router/views/utility/starter.vue
router/views/utility/timeline.vue
state/helpers.js
state/modules/aiChat.js
state/modules/auth.js
state/modules/index.js
state/modules/layout.js
state/modules/notification.js
state/modules/stock.js
state/modules/transaction.js
state/store.js

================================================================
Repository Files
================================================================

================
File: app.config.json
================
{
  "title": "Arcadia Crypto",
  "description": "Arcadia Crypto"
}

================
File: App.vue
================
<script>
import appConfig from "@/app.config";

import { notificationMethods } from "@/state/helpers";
import { mapGetters, mapActions } from 'vuex';


function startPooling() {
  this.pooler = setInterval(()=> {
    this.getAllStockTicker();

  },1000);
}


export default {
  name: "app",
  page: {
    // All subcomponent titles will be injected into this template.
    titleTemplate(title) {
      title = typeof title === "function" ? title(this.$store) : title;
      return title ? `${title} | ${appConfig.title}` : appConfig.title;
    }
  },
  mounted() {
    if (this.loggedIn && this.pooler == null) {
      startPooling.apply(this);
    }
  },
  data() { return {
    user: this.currentUser,
    pooler:null,
  }},
  watch: {
    /**
     * Clear the alert message on route change
     */
    // eslint-disable-next-line no-unused-vars
    $route(to, from) {
      // clear alert on location change
      this.clearNotification();
    },
    loggedIn: function(oldVal,newVal) {
      if (this.loggedIn) {
        startPooling.apply(this);
      } else {
        clearInterval(this.pooler);
      }
    }
  },
  computed: {
    ...mapGetters('auth',['loggedIn'])
  },
  methods: {
    ...mapActions('stock',['getAllStockTicker']),
    clearNotification: notificationMethods.clear
  }
};
</script>

<template>
  <div id="app">
    <RouterView />
  </div>
</template>

================
File: i18n.js
================
import Vue from 'vue'
import VueI18n from 'vue-i18n'

Vue.use(VueI18n)

function loadLocaleMessages() {
  const locales = require.context('./locales', true, /[A-Za-z0-9-_,\s]+\.json$/i)
  const messages = {}
  locales.keys().forEach(key => {
    const matched = key.match(/([A-Za-z0-9-_]+)\./i)
    if (matched && matched.length > 1) {
      const locale = matched[1]
      messages[locale] = locales(key)
    }
  })
  return messages
}

export default new VueI18n({
  locale: process.env.VUE_APP_I18N_LOCALE || 'en',
  fallbackLocale: process.env.VUE_APP_I18N_FALLBACK_LOCALE || 'en',
  messages: loadLocaleMessages(),
  silentTranslationWarn: true
})

================
File: main.js
================
import Vue from 'vue'
import BootstrapVue from 'bootstrap-vue'
import VueApexCharts from 'vue-apexcharts'
import Vuelidate from 'vuelidate'
import VueMask from 'v-mask'
import VueRouter from 'vue-router'
import vco from "v-click-outside"
import router from './router/index'
import Scrollspy from 'vue2-scrollspy';
import VueSweetalert2 from 'vue-sweetalert2';

import "@/design/index.scss";

import store from '@/state/store'

import App from './App.vue'


import i18n from './i18n'



import tinymce from 'vue-tinymce-editor'
Vue.component('tinymce', tinymce)


Vue.use(VueRouter)
Vue.use(vco)
Vue.use(Scrollspy);
const VueScrollTo = require('vue-scrollto')
Vue.use(VueScrollTo)
Vue.config.productionTip = false

Vue.use(BootstrapVue)
Vue.use(Vuelidate)
Vue.use(VueMask)
Vue.use(require('vue-chartist'))
Vue.use(VueSweetalert2);

Vue.component('apexchart', VueApexCharts)

new Vue({
  router,
  store,
  i18n,
  render: h => h(App)
}).$mount('#app')

================
File: api/stock.js
================
const axios = require('axios');


class Stock {

    constructor() {

    }

    stockTicker(symbol) {
        return new Promise((res,rej) => {
            axios.get(`/v1/stock/ticker/${symbol}`)
            .then((response) => {
                res(response.data);
            }).catch((err) => {
                rej(err);
            });
        });
    }

    stockCandles(symbol) {
        return new Promise((res,rej) => {
            axios.get(`/v1/stock/candles/${symbol}`)
                .then((response) => {
                    res(response.data);
                }).catch((err) => {
                rej(err);
            });
        });
    }

}


export default (new Stock());

================
File: api/user.js
================
const axios = require('axios');


class User {

    constructor() {
        this.email = null;
        this.jwt = null;
        this.loggedIn = false;

        const currentUser = sessionStorage.getItem('authUser') ? JSON.parse(sessionStorage.getItem('authUser')) : null;

        if (currentUser) {
            this.jwt = currentUser.jwt;
            this.accountId = currentUser.accountId;
            //this.email = currentUser.email Need to add this
            this.axios = axios.create({
                headers: { Authorization: `Bearer ${this.jwt}` }
            });
            this.loggedIn = true;
        }


    }

    login({email,password}) {
        this.email = email;

        return new Promise((res,rej) => {
            axios.post(`/v1/login`, {
                email,
                password
            }).then((response) => {

                const { status, accountId, name, cash, jwt } = response.data;

                if (status == 'success') {
                    this.accountId = accountId;
                    this.name = name;
                    this.cash = cash;
                    this.jwt = jwt;
                    this.axios = axios.create({
                        headers: { Authorization: `Bearer ${this.jwt}` }
                    });
                    res(response.data);
                } else {
                    res({
                        status: 'fail',
                        msg: 'Bad credentials'
                    });
                }

            }).catch((err) => {
                rej(err);            })
        });
    }

    logout() {
        this.loggedIn = false;
        this.currentUser = null;
        this.email = null;
        this.jwt = null;
        this.axios = null;
    }

    async stockTransaction({symbol,transactionType,amount}) {
        const result = await this.axios.post('/v1/stockt',{symbol,transactionType,amount:parseFloat(amount)});
        return result.data;
    }

    async refreshCurrentUser() {
        const result = await this.axios.get(`/v1/user/${this.accountId}`);
        return result.data;
    }

    async getAllTransactions() {
        const result = await this.axios.get(`/v1/stockt/transactions/${this.accountId}`);
        return result.data;
    }

    async aiChat({newQuestion}) {        
        const result = await this.axios.post('/v1/ai/chat',{ newQuestion});
        return result.data;
    }

    async resetAiChat() {
        const result = await this.axios.get('/v1/ai/chat/reset');
        return result.data;
    }
        
}


export default (new User());

================
File: state/helpers.js
================
import { mapState, mapGetters, mapActions } from 'vuex';



export const authComputed = {
  ...mapState('auth', {
    currentUser: (state) => state.currentUser,
  }),
  ...mapGetters('auth', ['loggedIn']),
};



export const layoutComputed = {
  ...mapState('layout', {
    layoutType: (state) => state.layoutType,
    leftSidebarType: (state) => state.leftSidebarType,
    layoutWidth: (state) => state.layoutWidth,
    topbar: (state) => state.topbar,
    loader: (state) => state.loader
  })
}

export const authMethods = mapActions('auth', ['logIn','loggedIn', 'logOut', 'register', 'resetPassword',])

export const layoutMethods = mapActions('layout', ['changeLayoutType', 'changeLayoutWidth', 'changeLeftSidebarType', 'changeTopbar', 'changeLoaderValue'])

export const notificationMethods = mapActions('notification', ['success', 'error', 'clear'])

================
File: state/store.js
================
import Vue from 'vue'
import Vuex from 'vuex'

import modules from './modules'

Vue.use(Vuex)

const store = new Vuex.Store({
  modules,
  // Enable strict mode in development to get a warning
  // when mutating state outside of a mutation.
  // https://vuex.vuejs.org/guide/strict.html
  strict: process.env.NODE_ENV !== 'production',
})

export default store

================
File: router/index.js
================
import Vue from 'vue'
import VueRouter from 'vue-router'
import VueMeta from 'vue-meta'

import store from '@/state/store'
import routes from './routes'

Vue.use(VueRouter)
Vue.use(VueMeta, {
  // The component option name that vue-meta looks for meta info on.
  keyName: 'page',
})

const router = new VueRouter({
  routes,
  // Use the HTML5 history API (i.e. normal-looking routes)
  // instead of routes with hashes (e.g. example.com/#/about).
  // This may require some server configuration in production:
  // https://router.vuejs.org/en/essentials/history-mode.html#example-server-configurations
  mode: 'history',
  // Simulate native-like scroll behavior when navigating to a new
  // route and using back/forward buttons.
  scrollBehavior(to, from, savedPosition) {
    if (savedPosition) {
      return savedPosition
    } else {
      return { x: 0, y: 0 }
    }
  },
})

// Before each route evaluates...
router.beforeEach((routeTo, routeFrom, next) => {
  // Check if auth is required on this route
  // (including nested routes).
  const authRequired = routeTo.matched.some((route) => route.meta.authRequired)

  // If auth isn't required for the route, just continue.
  if (!authRequired) return next()

  // If auth is required and the user is logged in...
  if (store.getters['auth/loggedIn']) {
    // Validate the local user token...
    return store.dispatch('auth/validate').then((validUser) => {
      // Then continue if the token still represents a valid user,
      // otherwise redirect to login.
      validUser ? next() : redirectToLogin()
    })
  }

  // If auth is required and the user is NOT currently logged in,
  // redirect to login.
  redirectToLogin()

  // eslint-disable-next-line no-unused-vars
  // eslint-disable-next-line no-inner-declarations
  function redirectToLogin() {
    // Pass the original route to the login component
    next({ name: 'login', query: { redirectFrom: routeTo.fullPath } })
  }

});

router.beforeResolve(async (routeTo, routeFrom, next) => {
  // Create a `beforeResolve` hook, which fires whenever
  // `beforeRouteEnter` and `beforeRouteUpdate` would. This
  // allows us to ensure data is fetched even when params change,
  // but the resolved route does not. We put it in `meta` to
  // indicate that it's a hook we created, rather than part of
  // Vue Router (yet?).
  try {
    // For each matched route...
    for (const route of routeTo.matched) {
      await new Promise((resolve, reject) => {
        // If a `beforeResolve` hook is defined, call it with
        // the same arguments as the `beforeEnter` hook.
        if (route.meta && route.meta.beforeResolve) {
          route.meta.beforeResolve(routeTo, routeFrom, (...args) => {
            // If the user chose to redirect...
            if (args.length) {
              // If redirecting to the same route we're coming from...
              // Complete the redirect.
              next(...args)
              reject(new Error('Redirected'))
            } else {
              resolve()
            }
          })
        } else {
          // Otherwise, continue resolving the route.
          resolve()
        }
      })
    }
    // If a `beforeResolve` hook chose to redirect, just return.
  } catch (error) {
    return
  }

  // If we reach this point, continue resolving the route.
  next()
});

export default router

================
File: router/routes.js
================
import store from '@/state/store'


export default [
  {
    path: '/',
    name: 'default',
    meta: {
      authRequired: true,
    },
    component: () => import('./views/crypto/wallet'),
  },
  {
    path: '/login',
    name: 'login',
    component: () => import('./views/account/login'),
    meta: {
      beforeResolve(routeTo, routeFrom, next) {
        // If the user is already logged in
        if (store.getters['auth/loggedIn']) {
          // Redirect to the home page instead
          next({ name: 'default' })
        } else {
          // Continue to the login page
          next()
        }
      },
    },
  },
  {
    path: '/register',
    name: 'Register',
    component: () => import('./views/account/register'),
    meta: {
      beforeResolve(routeTo, routeFrom, next) {
        // If the user is already logged in
        if (store.getters['auth/loggedIn']) {
          // Redirect to the home page instead
          next({ name: 'default' })
        } else {
          // Continue to the login page
          next()
        }
      },
    },
  },
  {
    path: '/forgot-password',
    name: 'Forgot password',
    component: () => import('./views/account/forgot-password'),
    meta: {
      beforeResolve(routeTo, routeFrom, next) {
        // If the user is already logged in
        if (store.getters['auth/loggedIn']) {
          // Redirect to the home page instead
          next({ name: 'default' })
        } else {
          // Continue to the login page
          next()
        }
      },
    },
  },
  {
    path: '/404',
    name: '404',
    component: require('./views/utility/404').default,
  },
  // Redirect any unmatched routes to the 404 page. This may
  // require some server configuration to work in production:
  // https://router.vuejs.org/en/essentials/history-mode.html#example-server-configurations
  {
    path: '*',
    redirect: '404',
  },
  {
    path: '/crypto/wallet',
    name: 'Wallet',
    meta: { authRequired: true },
    component: () => import('./views/crypto/wallet/index')
  },
  {
    path: '/crypto/exchange',
    name: 'Exchange',
    meta: { authRequired: true },
    component: () => import('./views/crypto/exchange/index')
  },
  {
    path: '/crypto/kyc-application',
    name: 'kyc-application',
    meta: { authRequired: true },
    component: () => import('./views/crypto/kycapplication/index')
  },
  {
    path: '/crypto/ico-landing',
    name: 'Ico-landing',
    meta: { authRequired: true },
    component: () => import('./views/crypto/ico-landing')
  }
]

================
File: components/AIChatbot.vue
================
<template>
  <div>
    <div 
      v-if="isChatbotAvailable"
      class="ai-chatbot" 
      :class="{ 'ai-chatbot-open': isOpen }"
      :style="{ bottom: positionY + 'px', right: positionX + 'px', width: chatWidth + 'px', height: isOpen ? chatHeight + 'px' : 'auto' }"
    >
      <div class="ai-chatbot-header" @mousedown="startDragging" @touchstart="startDragging">
        <h3>AI Assistant</h3>
        <div class="ai-chatbot-controls">
          <button v-if="isOpen" @click.stop="handleRestartChat" class="restart-button" title="Restart Chat">
            <i class="fas fa-redo"></i>
          </button>
          <button class="ai-chatbot-toggle" @click.stop="toggleChat">{{ isOpen ? '−' : '+' }}</button>
        </div>
      </div>
      <div v-if="isOpen" class="ai-chatbot-body">
        <div class="ai-chatbot-messages" ref="messageContainer">
          <div v-for="(message, index) in conversation" :key="index" :class="['message', message.sender]">
            {{ message.text }}
          </div>
        </div>
        <div class="ai-chatbot-input">
          <input 
            v-model="userInput" 
            @keyup.enter="handleSendMessage" 
            :placeholder="isWaiting ? waitingMessages[currentWaitingMessageIndex] : 'Type your message...'" 
            :disabled="isWaiting"
            :readonly="isWaiting"
          />
          <button @click="handleSendMessage" :disabled="isWaiting">
            {{ isWaiting ? `${responseTime}s` : 'Send' }}
          </button>
        </div>
      </div>
      <div v-if="isOpen" class="resize-handle" @mousedown="startResizing" @touchstart="startResizing"></div>
      <audio ref="audioAlert" src="@/assets/sounds/notification.wav"></audio>
    </div>
    <div v-if="highlightResponse" class="full-page-highlight"></div>
  </div>
</template>

<script>
import { mapState, mapActions } from 'vuex';
import user from '@/api/user';

export default {
  name: 'AIChatbot',
  data() {
    return {
      isOpen: false,
      userInput: '',
      isDragging: false,
      isResizing: false,
      startX: 0,
      startY: 0,
      positionX: 20,
      positionY: 20,
      chatWidth: 300,
      chatHeight: 400,
      isWaiting: false,
      isChatbotAvailable: false,
      waitingMessages: ['Thinking...', 'AI at work...', 'Making Magic...', 'Abracadabra...', 'Processing...'],
      currentWaitingMessageIndex: 0,
      waitingMessageInterval: null,
      highlightResponse: false,
      responseTime: 0,
      responseTimeInterval: null
    }
  },
  computed: {
    ...mapState('aiChat', ['conversation'])
  },
  mounted() {
    this.checkChatbotAvailability();
    window.addEventListener('mousemove', this.onMouseMove);
    window.addEventListener('mouseup', this.onMouseUp);
    window.addEventListener('touchmove', this.onTouchMove);
    window.addEventListener('touchend', this.onTouchEnd);
  },
  beforeDestroy() {
    window.removeEventListener('mousemove', this.onMouseMove);
    window.removeEventListener('mouseup', this.onMouseUp);
    window.removeEventListener('touchmove', this.onTouchMove);
    window.removeEventListener('touchend', this.onTouchEnd);
    this.clearWaitingMessageInterval();
    this.clearResponseTimeInterval();
  },
  methods: {
    ...mapActions('aiChat', ['sendMessage', 'restartChat']),
    checkChatbotAvailability() {
      this.isChatbotAvailable = user.loggedIn;
      if (this.isChatbotAvailable) {
        this.$nextTick(() => {
          this.initChat();
        });
      } else {
        console.log('AI Chatbot is not available. User not logged in.');
      }
    },
    toggleChat(event) {
      event.stopPropagation();
      this.isOpen = !this.isOpen;
      if (this.isOpen) {
        this.$nextTick(() => {
          this.scrollToBottom();
        });
      }
    },
    async handleSendMessage() {
      if (this.userInput.trim() === '' || this.isWaiting) return;

      const sentMessage = this.userInput;
      this.isWaiting = true;
      this.startWaitingMessageRotation();
      this.startResponseTimeCounter();
      this.userInput = this.waitingMessages[0];

      try {
        await this.sendMessage(sentMessage);
        this.highlightResponseReceived();
      } catch (error) {
        console.error('Error in sending message:', error);
      } finally {
        this.isWaiting = false;
        this.userInput = '';
        this.clearWaitingMessageInterval();
        this.clearResponseTimeInterval();
        this.$nextTick(() => {
          this.scrollToBottom();
        });
      }
    },
    startWaitingMessageRotation() {
      // ... (existing code)
    },
    clearWaitingMessageInterval() {
      // ... (existing code)
    },
    startResponseTimeCounter() {
      // ... (existing code)
    },
    clearResponseTimeInterval() {
      // ... (existing code)
    },
    highlightResponseReceived() {
      // ... (existing code)
    },
    async handleRestartChat() {
      // ... (existing code)
    },
    scrollToBottom() {
      const container = this.$refs.messageContainer;
      if (container) {
        container.scrollTop = container.scrollHeight;
      }
    },
    startDragging(event) {
      if (event.target.closest('.ai-chatbot-header')) {
        this.isDragging = true;
        const chatbot = this.$el.querySelector('.ai-chatbot');
        const rect = chatbot.getBoundingClientRect();

        if (event.type === 'mousedown') {
          this.startX = event.clientX - rect.left;
          this.startY = event.clientY - rect.top;
        } else if (event.type === 'touchstart') {
          this.startX = event.touches[0].clientX - rect.left;
          this.startY = event.touches[0].clientY - rect.top;
        }
        document.body.style.userSelect = 'none';
      }
    },
    startResizing(event) {
      event.preventDefault();
      this.isResizing = true;
      this.startX = event.clientX || event.touches[0].clientX;
      this.startY = event.clientY || event.touches[0].clientY;
      document.body.style.userSelect = 'none';
    },
    onMouseMove(event) {
      if (this.isDragging) {
        this.onDragging(event);
      } else if (this.isResizing) {
        this.onResizing(event);
      }
    },
    onTouchMove(event) {
      if (this.isDragging) {
        this.onDragging(event);
      } else if (this.isResizing) {
        this.onResizing(event);
      }
    },
    onDragging(event) {
      const clientX = event.clientX || event.touches[0].clientX;
      const clientY = event.clientY || event.touches[0].clientY;

      const windowWidth = window.innerWidth;
      const windowHeight = window.innerHeight;
      const chatbot = this.$el.querySelector('.ai-chatbot');
      const chatbotWidth = chatbot.offsetWidth;
      const chatbotHeight = chatbot.offsetHeight;

      const newRight = windowWidth - clientX + this.startX - chatbotWidth;
      const newBottom = windowHeight - clientY + this.startY - chatbotHeight;

      this.positionX = Math.max(0, Math.min(newRight, windowWidth - chatbotWidth));
      this.positionY = Math.max(0, Math.min(newBottom, windowHeight - chatbotHeight));
    },
    onResizing(event) {
      const clientX = event.clientX || event.touches[0].clientX;
      const clientY = event.clientY || event.touches[0].clientY;

      const deltaX = clientX - this.startX;
      const deltaY = clientY - this.startY;

      const minWidth = 300;
      const minHeight = 400;
      const maxWidth = window.innerWidth - this.positionX;
      const maxHeight = window.innerHeight - this.positionY;

      this.chatWidth = Math.max(minWidth, Math.min(this.chatWidth + deltaX, maxWidth));
      this.chatHeight = Math.max(minHeight, Math.min(this.chatHeight + deltaY, maxHeight));

      this.startX = clientX;
      this.startY = clientY;
    },
    onMouseUp() {
      this.isDragging = false;
      this.isResizing = false;
      document.body.style.userSelect = '';
    },
    onTouchEnd() {
      this.isDragging = false;
      this.isResizing = false;
      document.body.style.userSelect = '';
    },
    initChat() {
      this.handleRestartChat();
    }
  }
}
</script>

<style scoped>
.ai-chatbot {
  position: fixed;
  width: 300px;
  background-color: #fff;
  border-radius: 10px;
  box-shadow: 0 0 10px rgba(0,0,0,0.1);
  z-index: 1000;
  transition: all 0.3s ease;
  will-change: bottom, right, width, height;
}

.ai-chatbot-open {
  height: 400px;
}

.full-page-highlight {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(76, 175, 80, 0.3);
  z-index: 9999;
  animation: fullPageHighlight 1s ease-in-out;
}

@keyframes fullPageHighlight {
  0% { opacity: 0; }
  50% { opacity: 1; }
  100% { opacity: 0; }
}

.ai-chatbot-header {
  background-color: #4CAF50;
  color: white;
  padding: 10px;
  cursor: move;
  border-radius: 10px 10px 0 0;
  display: flex;
  justify-content: space-between;
  align-items: center;
  -webkit-user-drag: none;
  user-select: none;
}

.ai-chatbot-controls button {
  background: none;
  border: none;
  color: white;
  font-size: 16px;
  cursor: pointer;
  margin-left: 10px;
}

.ai-chatbot-body {
  height: calc(100% - 50px);
  display: flex;
  flex-direction: column;
}

.ai-chatbot-messages {
  flex-grow: 1;
  overflow-y: auto;
  padding: 10px;
}

.message {
  margin-bottom: 10px;
  padding: 5px 10px;
  border-radius: 5px;
  max-width: 80%;
}

.user {
  background-color: #E3F2FD;
  align-self: flex-end;
  margin-left: auto;
}

.bot {
  background-color: #F1F3F4;
}

.ai-chatbot-input {
  display: flex;
  padding: 10px;
}

.ai-chatbot-input input {
  flex-grow: 1;
  padding: 5px;
  border: 1px solid #ddd;
  border-radius: 5px 0 0 5px;
}

.ai-chatbot-input button {
  padding: 5px 10px;
  background-color: #4CAF50;
  color: white;
  border: none;
  border-radius: 0 5px 5px 0;
  cursor: pointer;
  min-width: 60px;
}

.ai-chatbot-input button:disabled {
  background-color: #cccccc;
  cursor: not-allowed;
}

.resize-handle {
  position: absolute;
  right: 0;
  bottom: 0;
  width: 20px;
  height: 20px;
  cursor: se-resize;
  background-color: #4CAF50;
  border-radius: 0 0 10px 0;
}

.resize-handle::before {
  content: '';
  position: absolute;
  right: 3px;
  bottom: 3px;
  width: 5px;
  height: 5px;
  background-color: white;
  box-shadow: 0 -6px 0 0 white, 0 -12px 0 0 white, -6px 0 0 0 white, -12px 0 0 0 white, -6px -6px 0 0 white;
}
</style>

================
File: components/footer.vue
================
<template>
  <footer class="footer">
    <div class="container-fluid">
      <div class="row">
        <div class="col-sm-6">{{ new Date().getFullYear() }} Arcadia Crypto.</div>
        <div class="col-sm-6">
          <div class="text-sm-right d-none d-sm-block">Welcome to the new financial universe</div>
        </div>
      </div>
    </div>
  </footer>
  <!-- end footer -->
</template>

================
File: components/horizontal-nav.vue
================
<script>
import { layoutMethods } from "@/state/helpers";
import { menuItems } from "./horizontal-menu";

export default {
  data() {
    return {
      menuItems: menuItems
    };
  },
  mounted() {
    var links = document.getElementsByClassName("side-nav-link-ref");
    var matchingMenuItem = null;
    for (var i = 0; i < links.length; i++) {
      if (window.location.pathname === links[i].pathname) {
        matchingMenuItem = links[i];
        break;
      }
    }

    if (matchingMenuItem) {
      matchingMenuItem.classList.add("active");
      var parent = matchingMenuItem.parentElement;

      /**
       * TODO: This is hard coded way of expading/activating parent menu dropdown and working till level 3.
       * We should come up with non hard coded approach
       */
      if (parent) {
        parent.classList.add("active");
        const parent2 = parent.parentElement;
        if (parent2) {
          parent2.classList.add("active");
        }
        const parent3 = parent2.parentElement;
        if (parent3) {
          parent3.classList.add("active");
          var childAnchor = parent3.querySelector(".has-dropdown");
          if (childAnchor) childAnchor.classList.add("active");
        }

        const parent4 = parent3.parentElement;
        if (parent4) parent4.classList.add("active");
        const parent5 = parent4.parentElement;
        if (parent5) parent5.classList.add("active");
      }
    }
  },
  methods: {
    ...layoutMethods,
    /**
     * Menu clicked show the submenu
     */
    onMenuClick(event) {
      event.preventDefault();
      const nextEl = event.target.nextSibling;
      if (nextEl && !nextEl.classList.contains("show")) {
        const parentEl = event.target.parentNode;
        if (parentEl) {
          parentEl.classList.remove("show");
        }
        nextEl.classList.add("show");
      } else if (nextEl) {
        nextEl.classList.remove("show");
      }
      return false;
    },
    /**
     * Returns true or false if given menu item has child or not
     * @param item menuItem
     */
    hasItems(item) {
      return item.subItems !== undefined ? item.subItems.length > 0 : false;
    }
  }
};
</script>
<template>
  <div class="topnav">
    <div class="container-fluid">
      <nav class="navbar navbar-light navbar-expand-lg topnav-menu active">
        <div class="collapse navbar-collapse active" id="topnav-menu-content">
          <ul class="navbar-nav">
            <!-- Menu data -->

            <li class="nav-item dropdown" v-for="(item, index) of menuItems" :key="index">
              <router-link
                class="nav-link dropdown-toggle arrow-none"
                tag="a"
                href="javascript: void(0);"
                @click.native="onMenuClick"
                :to="item.link ? item.link : ''"
              >
                <i :class="`bx ${item.icon} mr-2`"></i>
                {{ $t(item.label) }}
                <div v-if="hasItems(item)" class="arrow-down"></div>
              </router-link>
              <div
                class="dropdown-menu row"
                aria-labelledby="topnav-dashboard"
                v-if="hasItems(item)"
              >
                <span v-for="(subitem, index) of item.subItems" :key="index">
                  <router-link
                    class="col dropdown-item side-nav-link-ref"
                    v-if="!hasItems(subitem)"
                    :to="subitem.link"
                  >{{ $t(subitem.label) }}</router-link>
                  <div class="dropdown" v-if="hasItems(subitem)">
                    <a class="dropdown-item" href="javascript: void(0);" @click="onMenuClick">
                      {{ $t(subitem.label) }}
                      <div class="arrow-down"></div>
                    </a>
                    <div class="dropdown-menu">
                      <router-link
                        v-for="(subSubitem, index) of subitem.subItems"
                        :key="index"
                        :to="subSubitem.link"
                        class="dropdown-item side-nav-link-ref"
                      >{{ $t(subSubitem.label) }}</router-link>
                    </div>
                  </div>
                </span>
              </div>
            </li>
          </ul>
        </div>
      </nav>
    </div>
  </div>
</template>

================
File: components/menu.js
================
export const menuItems = [
    {
        id: 1,
        label: "Crypto",
        isTitle: true,
        icon: "bx-bitcoin",
    },
    {
        id: 2,
        label: "Wallet",
        link: "/crypto/wallet",
    },
    {
        id: 3,
        label: "Exchange",
        link: "/crypto/exchange"
    },
    {
        id: 4,
        label: "KYC application",
        link: "/crypto/kyc-application"
    }
];

================
File: components/nav-bar.vue
================
//THIS CONTROLLS THE TOP NAVBAR

<script>
import { authComputed } from "@/state/helpers";
import { mapActions} from 'vuex';
import i18n from "../i18n";





/**
 * Nav-bar Component
 */
export default {
  data() {
    return {
      user: this.currentUser(),
      languages: [
        {
          flag: require("@/assets/images/flags/us.jpg"),
          language: "en",
          title: "English",
        },
        {
          flag: require("@/assets/images/flags/french.jpg"),
          language: "fr",
          title: "French",
        },
        {
          flag: require("@/assets/images/flags/spain.jpg"),
          language: "es",
          title: "Spanish",
        },
        {
          flag: require("@/assets/images/flags/chaina.png"),
          language: "zh",
          title: "Chinese",
        },
        {
          flag: require("@/assets/images/flags/arabic.png"),
          language: "ar",
          title: "Arabic",
        },
      ],
      lan: i18n.locale,
      text: null,
      flag: null,
      value: null,
    };
  },
  components: {  },
  mounted() {
    this.value = this.languages.find((x) => x.language === i18n.locale);
    this.text = this.value.title;
    this.flag = this.value.flag;
  },
  methods: {
    ...authComputed,
    ...mapActions('auth',['logOut']),
    toggleMenu() {
      this.$parent.toggleMenu();
    },
    toggleRightSidebar() {
      this.$parent.toggleRightSidebar();
    },
    initFullScreen() {
      document.body.classList.toggle("fullscreen-enable");
      if (
        !document.fullscreenElement &&
        /* alternative standard method */ !document.mozFullScreenElement &&
        !document.webkitFullscreenElement
      ) {
        // current working methods
        if (document.documentElement.requestFullscreen) {
          document.documentElement.requestFullscreen();
        } else if (document.documentElement.mozRequestFullScreen) {
          document.documentElement.mozRequestFullScreen();
        } else if (document.documentElement.webkitRequestFullscreen) {
          document.documentElement.webkitRequestFullscreen(
            Element.ALLOW_KEYBOARD_INPUT
          );
        }
      } else {
        if (document.cancelFullScreen) {
          document.cancelFullScreen();
        } else if (document.mozCancelFullScreen) {
          document.mozCancelFullScreen();
        } else if (document.webkitCancelFullScreen) {
          document.webkitCancelFullScreen();
        }
      }
    },
    setLanguage(locale, country, flag) {
      this.lan = locale;
      this.text = country;
      this.flag = flag;
      i18n.locale = locale;
    },
    logoutUser() {
      this.logOut();
    },
  },
};
</script>

<template>
  <header id="page-topbar">
    <div class="navbar-header">
      <div class="d-flex">
        <!-- LOGO -->
        <div class="navbar-brand-box">
          <router-link tag="a" to="/" class="logo logo-light">
            <div class="logo-lg align-self-center">
              <div class="text-primary display-8" style="color:blue;font-size:20px;">Arcadia Crypto</div>
            </div>
          </router-link>
        </div>

        <button
          id="vertical-menu-btn"
          type="button"
          class="btn btn-sm px-3 font-size-16 header-item"
          @click="toggleMenu"
        >
          <i class="fa fa-fw fa-bars"></i>
        </button>

        <!-- App Search-->
        <form class="app-search d-none d-lg-block">
          <div class="position-relative">
            <input
              type="text"
              class="form-control"
              :placeholder="$t('navbar.search.text')"
            />
            <span class="bx bx-search-alt"></span>
          </div>
        </form>
      </div>

      <div class="d-flex">
        <b-dropdown
          class="d-inline-block d-lg-none ml-2"
          variant="black"
          menu-class="dropdown-menu-lg p-0"
          toggle-class="header-item noti-icon"
          right
        >
          <template v-slot:button-content>
            <i class="mdi mdi-magnify"></i>
          </template>

          <form class="p-3">
            <div class="form-group m-0">
              <div class="input-group">
                <input
                  type="text"
                  class="form-control"
                  placeholder="Search ..."
                  aria-label="Recipient's username"
                />
                <div class="input-group-append">
                  <button class="btn btn-primary" type="submit">
                    <i class="mdi mdi-magnify"></i>
                  </button>
                </div>
              </div>
            </div>
          </form>
        </b-dropdown>

        <b-dropdown variant="white" right toggle-class="header-item">
          <template v-slot:button-content>
            <img class :src="flag" alt="Header Language" height="16" />
            {{ text }}
          </template>
          <b-dropdown-item
            class="notify-item"
            v-for="(entry, i) in languages"
            :key="`Lang${i}`"
            :value="entry"
            @click="setLanguage(entry.language, entry.title, entry.flag)"
            :class="{ active: lan === entry.language }"
          >
            <img
              :src="`${entry.flag}`"
              alt="user-image"
              class="mr-1"
              height="12"
            />
            <span class="align-middle">{{ entry.title }}</span>
          </b-dropdown-item>
        </b-dropdown>

        <div class="dropdown d-none d-lg-inline-block ml-1">
          <button
            type="button"
            class="btn header-item noti-icon"
            @click="initFullScreen"
          >
            <i class="bx bx-fullscreen"></i>
          </button>
        </div>

        <b-dropdown right variant="black" toggle-class="header-item">
          <template v-slot:button-content>
            <img
              class="rounded-circle header-profile-user"
              src="@/assets/images/users/avatar-2.jpg"
              alt="Header Avatar"
            />
            <span class="d-none d-xl-inline-block ml-1">{{user.name}}</span>
            <i class="mdi mdi-chevron-down d-none d-xl-inline-block"></i>
          </template>
          <!-- item-->
          <b-dropdown-item href="javascript: void(0);">
            <i class="bx bx-user font-size-16 align-middle mr-1"></i>
            Profile
          </b-dropdown-item>
          <b-dropdown-item href="javascript: void(0);">
            <i class="bx bx-wallet font-size-16 align-middle mr-1"></i>
            {{ $t("navbar.dropdown.henry.list.mywallet") }}
          </b-dropdown-item>
          <b-dropdown-item class="d-block" href="javascript: void(0);">
            <span class="badge badge-success float-right">11</span>
            <i class="bx bx-wrench font-size-16 align-middle mr-1"></i>
            {{ $t("navbar.dropdown.henry.list.settings") }}
          </b-dropdown-item>
          <b-dropdown-item href="javascript: void(0);">
            <i class="bx bx-lock-open font-size-16 align-middle mr-1"></i>
            {{ $t("navbar.dropdown.henry.list.lockscreen") }}
          </b-dropdown-item>
          <b-dropdown-divider></b-dropdown-divider>

          <b-dropdown-item @click="logoutUser" href="javascript: void(0);" >
            <i class="bx bx-power-off font-size-16 align-middle mr-1 text-danger"></i>
            <span class="text-danger">Logout</span>
          </b-dropdown-item>
        </b-dropdown>


      </div>
    </div>
  </header>
</template>

================
File: components/page-header.vue
================
<script>
export default {
  components: {},
  props: {
    title: {
      type: String,
      default: '',
    },
    items: {
      type: Array,
      default: () => {
        return []
      },
    },
  },
}
</script>

<template>
  <!-- start page title -->
  <div class="row">
    <div class="col-12">
      <div class="page-title-box d-flex align-items-center justify-content-between">
        <h4 class="mb-0 font-size-18">{{ title }}</h4>

        <div class="page-title-right">
          <b-breadcrumb :items="items" class="m-0"></b-breadcrumb>
        </div>
      </div>
    </div>
  </div>
  <!-- end page title -->
</template>

================
File: components/right-bar.vue
================
<script>
import {
    layoutMethods
} from "@/state/helpers";
import simplebar from "simplebar-vue";

/**
 * Right sidebar component
 */
export default {
    components: {
        simplebar,
    },
    data() {
        return {
            config: {
                handler: this.handleRightBarClick,
                middleware: this.middleware,
                events: ["click"],
            },
            layout: this.$store ? this.$store.state.layout.layoutType : {} || {},
            width: this.$store ? this.$store.state.layout.layoutWidth : {} || {},
            topbar: this.$store ? this.$store.state.layout.topbar : {} || {},
            sidebarType: this.$store ?
                this.$store.state.layout.leftSidebarType :
                {} || {},
            loader: this.$store ? this.$store.state.layout.loader : {} || {},
        };
    },
    methods: {
        ...layoutMethods,
        hide() {
            this.$parent.toggleRightSidebar();
        },
        // eslint-disable-next-line no-unused-vars
        handleRightBarClick(e, el) {
            this.$parent.hideRightSidebar();
        },
        // eslint-disable-next-line no-unused-vars
        middleware(event, el) {
            if(event.target.classList)
            return !event.target.classList.contains("toggle-right");
        },
        changeLayout(layout) {
            this.changeLayoutType({
                layoutType: layout,
            });
        },
        changeType(type) {
            return this.changeLeftSidebarType({
                leftSidebarType: type,
            });
        },
        changeWidth(width) {
            return this.changeLayoutWidth({
                layoutWidth: width,
            });
        },
        changeTopbartype(value) {
            return this.changeTopbar({
                topbar: value,
            });
        },
        changeloader() {
            return this.changeLoaderValue({
                loader: this.loader,
            });
        },
    },
};
</script>

<template>
<div>
    <div v-click-outside="config" class="right-bar">
        <simplebar class="h-100">
            <div class="rightbar-title px-3 py-4">
                <h5 class="m-0">Settings</h5>
            </div>

            <div class="p-3">
                <h6 class="mb-0">Layout</h6>
                <hr class="mt-1" />
                <b-form-radio-group v-model="layout" stacked @input="changeLayout($event)">
                    <b-form-radio value="vertical" class="mb-1">Vertical</b-form-radio>
                    <b-form-radio value="horizontal" class="mb-1">Horizontal</b-form-radio>
                </b-form-radio-group>
                <!-- Width -->
                <h6 class="mt-3">Width</h6>
                <hr class="mt-1" />
                <b-form-radio-group v-model="width" stacked @input="changeWidth($event)">
                    <b-form-radio value="fluid" class="mb-1">Fluid</b-form-radio>
                    <b-form-radio value="boxed" class="mb-1">Boxed</b-form-radio>
                    <b-form-radio value="scrollable">Scrollable</b-form-radio>
                </b-form-radio-group>

                <!-- Sidebar -->
                <div v-if="layout === 'vertical'">
                    <h6 class="mt-3">Sidebar</h6>
                    <hr class="mt-1" />
                    <b-form-radio-group v-model="sidebarType" stacked @input="changeType($event)">
                        <b-form-radio value="dark" class="mb-1">Dark</b-form-radio>
                        <b-form-radio value="light" class="mb-1">Light</b-form-radio>
                        <b-form-radio value="compact" class="mb-1">Compact</b-form-radio>
                        <b-form-radio value="icon" class="mb-1">Icon</b-form-radio>
                        <b-form-radio value="colored">Colored</b-form-radio>
                    </b-form-radio-group>
                </div>

                <!-- Topbar -->
                <div v-if="layout === 'horizontal'">
                    <h6 class="mt-3">Topbar</h6>
                    <hr class="mt-1" />
                    <b-form-radio-group v-model="topbar" stacked @input="changeTopbartype($event)">
                        <b-form-radio value="dark" class="mb-1">Dark</b-form-radio>
                        <b-form-radio value="light" class="mb-1">Light</b-form-radio>
                        <b-form-radio value="colored" class="mb-1">Colored</b-form-radio>
                    </b-form-radio-group>
                </div>

                <!-- Preloader -->
                <h6 class="mt-3">Preloader</h6>
                <hr class="mt-1" />

                <b-form-checkbox v-model="loader" name="check-button" switch @input="changeloader">Preloader</b-form-checkbox>
            </div>
            <h6 class="text-center mb-0">Choose Mode</h6>
            <div class="p-4">
                <div class="mb-2">
                    <router-link tag="a" target="_blank" to="//skote.vuejs-light.themesbrand.com/">
                        <img src="@/assets/images/layouts/layout-1.jpg" class="img-fluid img-thumbnail" alt />
                    </router-link>
                </div>

                <div class="mb-2">
                    <router-link tag="a" target="_blank" to="//skote.vuejs-dark.themesbrand.com/">
                        <img src="@/assets/images/layouts/layout-2.jpg" class="img-fluid img-thumbnail" alt />
                    </router-link>
                </div>

                <div class="mb-2">
                    <router-link tag="a" target="_blank" to="//skote.vuejs-rtl.themesbrand.com/">
                        <img src="@/assets/images/layouts/layout-3.jpg" class="img-fluid img-thumbnail" alt />
                    </router-link>
                </div>
            </div>
        </simplebar>
    </div>

    <!-- Right bar overlay-->
    <div class="rightbar-overlay"></div>
</div>
</template>

<style lang="scss"></style>

================
File: components/side-bar.vue
================
<script>
import simplebar from "simplebar-vue";

import SideNav from "./side-nav";
import { layoutComputed } from "@/state/helpers";
/**
 * Sidebar component
 */
export default {
  components: { simplebar, SideNav },
  props: {
    isCondensed: {
      type: Boolean,
      default: false,
    },
    type: {
      type: String,
      required: true,
    },
    width: {
      type: String,
      required: true,
    },
  },
  computed: {
    ...layoutComputed,
  },
  data() {
    return {
      settings: {
        minScrollbarLength: 60,
      },
      widthss: this.$store ? this.$store.state.layout.layoutWidth : {} || {},
    };
  },
  methods: {
    onRoutechange() {
      setTimeout(() => {
        let  currentPosition = document.getElementsByClassName("mm-active")[0] ? document.getElementsByClassName("mm-active")[0].offsetTop : 0;

        if (currentPosition > 500)
          this.$refs.currentMenu.SimpleBar.getScrollElement().scrollTop =
            currentPosition + 300;
      }, 300);
    },
  },
  mounted() {},
  watch: {
    $route: {
      handler: "onRoutechange",
      immediate: true,
      deep: true,
    },
    type: {
      immediate: true,
      handler(newVal, oldVal) {
        if (newVal !== oldVal) {
          switch (newVal) {
            case "dark":
              document.body.setAttribute("data-sidebar", "dark");
              document.body.removeAttribute("data-topbar");
              document.body.removeAttribute("data-sidebar-size");
              break;
            case "light":
              document.body.setAttribute("data-topbar", "dark");
              document.body.removeAttribute("data-sidebar");
              document.body.removeAttribute("data-sidebar-size");
              document.body.classList.remove("vertical-collpsed");
              break;
            case "compact":
              document.body.setAttribute("data-sidebar-size", "small");
              document.body.setAttribute("data-sidebar", "dark");
              document.body.classList.remove("vertical-collpsed");
              document.body.removeAttribute("data-topbar", "dark");
              break;
            case "icon":
              document.body.setAttribute("data-keep-enlarged", "true");
              document.body.classList.add("vertical-collpsed");
              document.body.setAttribute("data-sidebar", "dark");
              document.body.removeAttribute("data-topbar", "dark");
              break;
            case "colored":
              document.body.setAttribute("data-sidebar", "colored");
              document.body.removeAttribute("data-keep-enlarged");
              document.body.classList.remove("vertical-collpsed");
              document.body.removeAttribute("data-sidebar-size");
              break;
            default:
              document.body.setAttribute("data-sidebar", "dark");
              break;
          }
        }
      },
    },
    width: {
      immediate: true,
      handler(newVal, oldVal) {
        if (newVal !== oldVal) {
          switch (newVal) {
            case "boxed":
              document.body.setAttribute("data-layout-size", "boxed");
              break;
            case "fluid":
              document.body.setAttribute("data-layout-mode", "fluid");
              document.body.removeAttribute("data-layout-size");
              break;
            case "scrollable":
              document.body.setAttribute("data-layout-scrollable", "true");
              document.body.removeAttribute("data-layout-mode");
              break;
            default:
              document.body.setAttribute("data-layout-mode", "fluid");
              break;
          }
        }
      },
    },
  },
};
</script>

<template>
  <!-- ========== Left Sidebar Start ========== -->
  <div class="vertical-menu">
    <simplebar
      v-if="!isCondensed"
      :settings="settings"
      class="h-100"
      ref="currentMenu"
      id="my-element"
    >
      <SideNav />
    </simplebar>

    <simplebar v-else class="h-100">
      <SideNav />
    </simplebar>
  </div>
  <!-- Left Sidebar End -->
</template>

================
File: components/side-nav.vue
================
<script>
import MetisMenu from "metismenujs/dist/metismenujs";

import {
    menuItems
} from "./menu";

/**
 * Sidenav component
 */
export default {
    data() {
        return {
            menuItems: menuItems,
            menuData: null,
        };
    },
    mounted: function () {
    
        // eslint-disable-next-line no-unused-vars
        var menuRef = new MetisMenu("#side-menu");
        var links = document.getElementsByClassName("side-nav-link-ref");
        var matchingMenuItem = null;
        const paths = [];

        for (var i = 0; i < links.length; i++) {
            paths.push(links[i]["pathname"]);
        }
        var itemIndex = paths.indexOf(window.location.pathname);
        if (itemIndex === -1) {
            const strIndex = window.location.pathname.lastIndexOf("/");
            const item = window.location.pathname.substr(0, strIndex).toString();
            matchingMenuItem = links[paths.indexOf(item)];
        } else {
            matchingMenuItem = links[itemIndex];
        }

        if (matchingMenuItem) {
            matchingMenuItem.classList.add("active");
            var parent = matchingMenuItem.parentElement;

            /**
             * TODO: This is hard coded way of expading/activating parent menu dropdown and working till level 3.
             * We should come up with non hard coded approach
             */
            if (parent) {
                parent.classList.add("mm-active");
                const parent2 = parent.parentElement.closest("ul");
                if (parent2 && parent2.id !== "side-menu") {
                    parent2.classList.add("mm-show");

                    const parent3 = parent2.parentElement;
                    if (parent3) {
                        parent3.classList.add("mm-active");
                        var childAnchor = parent3.querySelector(".has-arrow");
                        var childDropdown = parent3.querySelector(".has-dropdown");
                        if (childAnchor) childAnchor.classList.add("mm-active");
                        if (childDropdown) childDropdown.classList.add("mm-active");

                        const parent4 = parent3.parentElement;
                        if (parent4 && parent4.id !== "side-menu") {
                            parent4.classList.add("mm-show");
                            const parent5 = parent4.parentElement;
                            if (parent5 && parent5.id !== "side-menu") {
                                parent5.classList.add("mm-active");
                                const childanchor = parent5.querySelector(".is-parent");
                                if (childanchor && parent5.id !== "side-menu") {
                                    childanchor.classList.add("mm-active");
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    methods: {
        /**
         * Returns true or false if given menu item has child or not
         * @param item menuItem
         */
        hasItems(item) {
            return item.subItems !== undefined ? item.subItems.length > 0 : false;
        },

        toggleMenu(event) {
            event.currentTarget.nextElementSibling.classList.toggle("mm-show");
        },
    },
};
</script>

<template>
<!-- ========== Left Sidebar Start ========== -->

<!--- Sidemenu -->
<div id="sidebar-menu">
    <!-- Left Menu Start -->
    <ul id="side-menu" class="metismenu list-unstyled">
        <template v-for="item in menuItems">
            <li class="menu-title" v-if="item.isTitle" :key="item.id">
                {{ $t(item.label) }}
            </li>
            <li v-if="!item.isTitle && !item.isLayout" :key="item.id">
                <a v-if="hasItems(item)" href="javascript:void(0);" class="is-parent" :class="{ 'has-arrow': !item.badge, 'has-dropdown': item.badge }">
                    <i :class="`bx ${item.icon}`" v-if="item.icon"></i>
                    <span>{{ $t(item.label) }}</span>
                    <span :class="`badge badge-pill badge-${item.badge.variant} float-right`" v-if="item.badge">{{ $t(item.badge.text) }}</span>
                </a>

                <router-link :to="item.link" v-if="!hasItems(item)" class="side-nav-link-ref">
                    <i :class="`bx ${item.icon}`" v-if="item.icon"></i>
                    <span>{{ $t(item.label) }}</span>
                    <span :class="`badge badge-pill badge-${item.badge.variant} float-right`" v-if="item.badge">{{ $t(item.badge.text) }}</span>
                </router-link>

                <ul v-if="hasItems(item)" class="sub-menu" aria-expanded="false">
                    <li v-for="(subitem, index) of item.subItems" :key="index">
                        <router-link :to="subitem.link" v-if="!hasItems(subitem)" class="side-nav-link-ref">{{ $t(subitem.label) }}</router-link>
                        <a v-if="hasItems(subitem)" class="side-nav-link-a-ref has-arrow" href="javascript:void(0);">{{ $t(subitem.label) }}</a>
                        <ul v-if="hasItems(subitem)" class="sub-menu mm-collapse" aria-expanded="false">
                            <li v-for="(subSubitem, index) of subitem.subItems" :key="index">
                                <router-link :to="subSubitem.link" class="side-nav-link-ref">{{ $t(subSubitem.label) }}</router-link>
                            </li>
                        </ul>
                    </li>
                </ul>
            </li>
        </template>
    </ul>
</div>
<!-- Sidebar -->
</template>

================
File: state/modules/aiChat.js
================
// state/modules/aiChat.js

import user from '@/api/user';

console.log('THIS IS loaded');

const state = {
  conversation: []
};

const mutations = {
  ADD_MESSAGE(state, message) {
    state.conversation.push(message);
  },
  CLEAR_CONVERSATION(state) {
    state.conversation = [];
  }
};

const actions = {
  async sendMessage({ commit }, newMessage) {
    commit('ADD_MESSAGE', { sender: 'user', text: newMessage });    
    try {          
      const response = await user.aiChat({ newQuestion: newMessage });
      
      const botReply = { sender: 'bot', text: response.reply };
      commit('ADD_MESSAGE', botReply);
      return botReply;
    } catch (error) {
      console.error('Error sending message to AI:', error);
      const errorMessage = { sender: 'bot', text: 'Sorry, I encountered an error. Please try again.' };
      commit('ADD_MESSAGE', errorMessage);
      throw error;
    }
  },
  async restartChat({ commit }) {
    commit('CLEAR_CONVERSATION');
    const initialMessage = { sender: 'bot', text: 'Hello! How can I assist you with crypto trading today?' };
    commit('ADD_MESSAGE', initialMessage);
  }
};

const getters = {
  // You can add getters here if needed
};

export {
  state,
  mutations,
  actions,
  getters
};

================
File: state/modules/auth.js
================
import user from '../../api/user';
import router from '@/router';


const state = {
    currentUser: sessionStorage.getItem('authUser') ? JSON.parse(sessionStorage.getItem('authUser')) : null,
};

const mutations = {
    SET_CURRENT_USER(state, newValue) {
        if (newValue) newValue.cash = Math.round(newValue.cash * 100) / 100;
        state.currentUser = newValue;

        sessionStorage.setItem('authUser',JSON.stringify(newValue));
    },

    UPDATE_CASH_STOCK(state,newCurrentUser) {
        state.currentUser.cash = Math.round(newCurrentUser.cash * 100) / 100;
        state.currentUser.stocks = newCurrentUser.stocks;
        sessionStorage.setItem('authUser',JSON.stringify(state.currentUser));
    }
};

const getters = {
    loggedIn(state) {
        return !!state.currentUser;
    },
};

const actions = {
    logOut({commit}) {
        sessionStorage.removeItem('authUser');
        commit('SET_CURRENT_USER',null);
        user.logout();
        router.push('/login');
    },
    async logIn({commit},data) {
        const  result  = await user.login({email:data.email,password:data.password});

        if (result.status == 'success') {

            commit('SET_CURRENT_USER',result);

        }
        return result;
    },
    validate({ commit, state }) {
        //THIS SHOULD BE CHANGED IT IS VALIDATING THAT THE USER IS ACTUALLY LOGGED IN
        //if (!state.currentUser) return Promise.resolve(null);

        //commit('SET_CURRENT_USER', state.currentUser);
        return state.currentUser;
    },
    async refreshCurrentUser({commit}) {
        const currentUser = await user.refreshCurrentUser();
        commit('UPDATE_CASH_STOCK',currentUser);
    }
};

export  {
    state,
    mutations,
    getters,
    actions,
};

================
File: state/modules/index.js
================
// Register each file as a corresponding Vuex module. Module nesting
// will mirror [sub-]directory hierarchy and modules are namespaced
// as the camelCase equivalent of their file name.

import camelCase from 'lodash/camelCase'

const modulesCache = {}
const storeData = { modules: {} }

;(function updateModules() {
  // Allow us to dynamically require all Vuex module files.
  // https://webpack.js.org/guides/dependency-management/#require-context
  const requireModule = require.context(
    // Search for files in the current directory.
    '.',
    // Search for files in subdirectories.
    true,
    // Include any .js files that are not this file or a unit test.
    /^((?!index|\.unit\.).)*\.js$/
  )

  // For every Vuex module...
  requireModule.keys().forEach((fileName) => {
    const moduleDefinition = requireModule(fileName)

    // Skip the module during hot reload if it refers to the
    // same module definition as the one we have cached.
    if (modulesCache[fileName] === moduleDefinition) return

    // Update the module cache, for efficient hot reloading.
    modulesCache[fileName] = moduleDefinition

    // Get the module path as an array.
    const modulePath = fileName
      // Remove the "./" from the beginning.
      .replace(/^\.\//, '')
      // Remove the file extension from the end.
      .replace(/\.\w+$/, '')
      // Split nested modules into an array path.
      .split(/\//)
      // camelCase all module namespaces and names.
      .map(camelCase)

    // Get the modules object for the current path.
    const { modules } = getNamespace(storeData, modulePath)

    // Add the module to our modules object.
    modules[modulePath.pop()] = {
      // Modules are namespaced by default.
      namespaced: true,
      ...moduleDefinition,
    }
  })

  // If the environment supports hot reloading...
  if (module.hot) {
    // Whenever any Vuex module is updated...
    module.hot.accept(requireModule.id, () => {
      // Update `storeData.modules` with the latest definitions.
      updateModules()
      // Trigger a hot update in the store.
      require('../store').default.hotUpdate({ modules: storeData.modules })
    })
  }
})()

// Recursively get the namespace of a Vuex module, even if nested.
function getNamespace(subtree, path) {
  if (path.length === 1) return subtree

  const namespace = path.shift()
  subtree.modules[namespace] = {
    modules: {},
    namespaced: true,
    ...subtree.modules[namespace],
  }
  return getNamespace(subtree.modules[namespace], path)
}

export default storeData.modules

================
File: state/modules/layout.js
================
export const state = {
  layoutType: 'vertical',
  layoutWidth: 'fluid',
  leftSidebarType: 'dark',
  topbar: 'dark',
  loader: false
}

export const mutations = {
  CHANGE_LAYOUT(state, layoutType) {
    state.layoutType = layoutType;
  },
  CHANGE_LAYOUT_WIDTH(state, layoutWidth) {
    state.layoutWidth = layoutWidth;
  },
  CHANGE_LEFT_SIDEBAR_TYPE(state, leftSidebarType) {
    state.leftSidebarType = leftSidebarType;
  },
  CHANGE_TOPBAR(state, topbar) {
    state.topbar = topbar;
  },
  LOADER(state, loader) {
    state.loader = loader
  }
}

export const actions = {
  changeLayoutType({ commit }, { layoutType }) {
    commit('CHANGE_LAYOUT', layoutType);
  },

  changeLayoutWidth({ commit }, { layoutWidth }) {
    commit('CHANGE_LAYOUT_WIDTH', layoutWidth)
  },

  changeLeftSidebarType({ commit }, { leftSidebarType }) {
    commit('CHANGE_LEFT_SIDEBAR_TYPE', leftSidebarType)
  },

  changeTopbar({ commit }, { topbar }) {
    commit('CHANGE_TOPBAR', topbar)
  },

  changeLoaderValue({ commit }, { loader }) {
    commit('LOADER', loader)
  }
}

================
File: state/modules/notification.js
================
export const state = {
    type: null,
    message: null
};

export const mutations = {
    success(state, message) {
        state.type = 'alert-success';
        state.message = message;
    },
    error(state, message) {
        state.type = 'alert-danger';
        state.message = message;
    },
    clear(state) {
        state.type = null;
        state.message = null;
    }
};

export const actions = {
    success({ commit }, message) {
        commit('success', message);
    },
    error({ commit }, message) {
        commit('error', message);
    },
    clear({ commit }) {
        commit('clear');
    }
};

================
File: state/modules/stock.js
================
import stock from '@/api/stock';
import user from '@/api/user';

const state = {
    btc: {
        ticker:null,
        candles:null
    },
    eth: {
        ticker:null,
        candles:null
    },
    ltc: {
        ticker:null,
        candles:null
    }
};

const mutations = {
    SET_TICKER_ALL(state, newValue) {
        state.btc.ticker = newValue.btc.ticker;
        state.eth.ticker = newValue.eth.ticker;
        state.ltc.ticker = newValue.ltc.ticker;




    },
    SET_CANDLES_ALL(state, newValue) {
        state.btc.candles = prepCandles(newValue.btc);
        state.eth.candles = prepCandles(newValue.eth);
        state.ltc.candles = prepCandles(newValue.ltc);
    }
};

const getters = {

};

const actions = {
    async getAllStockTicker({commit}) {
        const result = await stock.stockTicker('all');
        commit('SET_TICKER_ALL',result);
    },
    async getAllStockCandles({commit}) {
        const result = await stock.stockCandles('all');
        commit('SET_CANDLES_ALL',result);
    },
    async stockTransaction({commit, dispatch},{symbol,transactionType,amount}) {
        const result = await user.stockTransaction({symbol,transactionType,amount});
        dispatch('auth/refreshCurrentUser',null, { root: true });
        dispatch('transaction/getAllTransactions',null, { root: true });
        return result;
    }

};

export  {
    state,
    mutations,
    getters,
    actions,
};


function prepCandles(series) {
    const data =  series.map( (i) => {
        return {
            x: new Date(i.mts),
            y: [i.open, i.high, i.low, i.close]
        }

    });
    return [{data}]
}

================
File: state/modules/transaction.js
================
import user from '@/api/user';

const state = {
    allTransactions: null
};

const mutations = {
    SET_ALL_TRANSACTIONS(state, newValue) {

        state.allTransactions = newValue.map(( x ) => {
            return {
                ...x,
                totalValue: Math.round(x.price * x.amount * 1000) / 1000
            }
        });


        /*state.allTransactions = newValue.map((x) => {
            return {
                'ID': x.transactionId,
                'Crypto': x.symbol.toUpperCase(),
                'Crypto Amount': x.amount,
                'Type': x.transactionType.toUpperCase(),
                'Unit Price': x.price,
                'Total Value': x.price * x.amount,
                'Date': new Date(x.date)
            }
        });*/
    },

};

const getters = {

};

const actions = {
    async getAllTransactions({commit}) {
        const result = await user.getAllTransactions();
        commit('SET_ALL_TRANSACTIONS',result);
    },
};

export  {
    state,
    mutations,
    getters,
    actions,
};

================
File: router/layouts/auth.vue
================
<script>
export default {
    components: {},
};
</script>

<template>
<div>
    <div class="home-btn d-none d-sm-block">
        <router-link tag="a" to="/" class="text-dark">
            <i class="mdi mdi-home-variant h2"></i>
        </router-link>
    </div>
    <div class="account-pages my-5 pt-5">
        <div class="container">
            <slot />
        </div>
    </div>
</div>
</template>

================
File: router/layouts/horizontal.vue
================
<script>
import HorizontalTopbar from "@/components/horizontal-topbar";
import HorizontalNav from "@/components/horizontal-nav";
import RightBar from "@/components/right-bar";
import Footer from "@/components/footer";

import { layoutComputed } from "@/state/helpers";

/**
 * Horizontal-layout
 */
export default {
  components: {
    HorizontalTopbar,
    HorizontalNav,
    Footer,
    RightBar,
  },
  data() {
    return {};
  },
  computed: {
    ...layoutComputed,
  },
  created: () => {
    document.body.setAttribute("data-layout", "horizontal");
    document.body.setAttribute("data-topbar", "dark");
    document.body.removeAttribute("data-sidebar");
    document.body.removeAttribute("data-layout-size");
  },
  methods: {
    toggleRightSidebar() {
      document.body.classList.toggle("right-bar-enabled");
    },
    hideRightSidebar() {
      document.body.classList.remove("right-bar-enabled");
    },
  },
  mounted() {
    if (this.loader === true) {
      document.getElementById("preloader").style.display = "block";
      document.getElementById("status").style.display = "block";

      setTimeout(function () {
        document.getElementById("preloader").style.display = "none";
        document.getElementById("status").style.display = "none";
      }, 2500);
    } else {
      document.getElementById("preloader").style.display = "none";
      document.getElementById("status").style.display = "none";
    }
  },
};
</script>

<template>
  <div>
    <div id="preloader">
      <div id="status">
        <div class="spinner-chase">
          <div class="chase-dot"></div>
          <div class="chase-dot"></div>
          <div class="chase-dot"></div>
          <div class="chase-dot"></div>
          <div class="chase-dot"></div>
          <div class="chase-dot"></div>
        </div>
      </div>
    </div>
    <!-- Begin page -->
    <div id="layout-wrapper">
      <HorizontalTopbar :type="topbar" :width="layoutWidth" />
      <HorizontalNav />
      <!-- ============================================================== -->
      <!-- Start right Content here -->
      <!-- ============================================================== -->
      <div class="main-content">
        <div class="page-content">
          <div class="container-fluid">
            <slot />
          </div>
          <!-- container-fluid -->
        </div>
        <!-- End Page-content -->
        <Footer />
      </div>
      <!-- end main content-->
    </div>
    <!-- END layout-wrapper -->
    <RightBar />
  </div>
</template>

================
File: router/layouts/main.vue
================
<script>
import {
    layoutComputed
} from "@/state/helpers";
import Vertical from "./vertical";
import Horizontal from "./horizontal";

export default {
    components: {
        Vertical,
        Horizontal,
    },
    data() {
        return {};
    },
    computed: {
        ...layoutComputed,
    },
    methods: {},
};
</script>

<template>
<div>
    <vertical v-if="layoutType === 'vertical'" :layout="layoutType">
        <slot />
    </vertical>

    <Horizontal v-if="layoutType === 'horizontal'" :layout="layoutType">
        <slot />
    </Horizontal>
</div>
</template>

================
File: router/layouts/vertical.vue
================
<script>
import router from "@/router";
import { layoutComputed } from "@/state/helpers";

import NavBar from "@/components/nav-bar";
import SideBar from "@/components/side-bar";
import RightBar from "@/components/right-bar";
import Footer from "@/components/footer";

/**
 * Vertical layout
 */
export default {
  components: { NavBar, SideBar, RightBar, Footer },
  data() {
    return {
      isMenuCondensed: false,
    };
  },
  computed: {
    ...layoutComputed,
  },
  created: () => {
    document.body.removeAttribute("data-layout", "horizontal");
    document.body.removeAttribute("data-topbar", "dark");
    document.body.removeAttribute("data-layout-size", "boxed");
  },
  methods: {
    toggleMenu() {
      document.body.classList.toggle("sidebar-enable");

      if (window.screen.width >= 992) {
        // eslint-disable-next-line no-unused-vars
        router.afterEach((routeTo, routeFrom) => {
          document.body.classList.remove("sidebar-enable");
          document.body.classList.remove("vertical-collpsed");
        });
        document.body.classList.toggle("vertical-collpsed");
      } else {
        // eslint-disable-next-line no-unused-vars
        router.afterEach((routeTo, routeFrom) => {
          document.body.classList.remove("sidebar-enable");
        });
        document.body.classList.remove("vertical-collpsed");
      }
      this.isMenuCondensed = !this.isMenuCondensed;
    },
    toggleRightSidebar() {
      document.body.classList.toggle("right-bar-enabled");
    },
    hideRightSidebar() {
      document.body.classList.remove("right-bar-enabled");
    },
  },
  mounted() {
    if (this.loader === true) {
      document.getElementById("preloader").style.display = "block";
      document.getElementById("status").style.display = "block";

      setTimeout(function () {
        document.getElementById("preloader").style.display = "none";
        document.getElementById("status").style.display = "none";
      }, 2500);
    } else {
      document.getElementById("preloader").style.display = "none";
      document.getElementById("status").style.display = "none";
    }
  },
};
</script>

<template>
  <div>
    <div id="preloader">
      <div id="status">
        <div class="spinner-chase">
          <div class="chase-dot"></div>
          <div class="chase-dot"></div>
          <div class="chase-dot"></div>
          <div class="chase-dot"></div>
          <div class="chase-dot"></div>
          <div class="chase-dot"></div>
        </div>
      </div>
    </div>
    <div id="layout-wrapper">
      <NavBar />
      <SideBar :is-condensed="isMenuCondensed" :type="leftSidebarType" :width="layoutWidth" />
      <!-- ============================================================== -->
      <!-- Start Page Content here -->
      <!-- ============================================================== -->

      <div class="main-content">
        <div class="page-content">
          <!-- Start Content-->
          <div class="container-fluid">
            <slot />
          </div>
        </div>
        <Footer />
      </div>
      <RightBar />
    </div>
  </div>
</template>

================
File: components/widgets/activity.vue
================
<script>
import Loader from "./loader";

export default {
  components: {
    Loader,
  },
  props: {
    updating: {
      type: Boolean,
    },
  },
};
</script>
<template>
  <Loader :loading="updating">
    <div class="card">
      <div class="card-body">
        <h4 class="card-title mb-5">Activity</h4>
        <ul class="verti-timeline list-unstyled">
          <li class="event-list">
            <div class="event-timeline-dot">
              <i class="bx bx-right-arrow-circle font-size-18"></i>
            </div>
            <div class="media">
              <div class="mr-3">
                <h5 class="font-size-14">
                  22 Nov
                  <i
                    class="bx bx-right-arrow-alt font-size-16 text-primary align-middle ml-2"
                  ></i>
                </h5>
              </div>
              <div class="media-body">
                <div>Responded to need “Volunteer Activities</div>
              </div>
            </div>
          </li>
          <li class="event-list">
            <div class="event-timeline-dot">
              <i class="bx bx-right-arrow-circle font-size-18"></i>
            </div>
            <div class="media">
              <div class="mr-3">
                <h5 class="font-size-14">
                  17 Nov
                  <i
                    class="bx bx-right-arrow-alt font-size-16 text-primary align-middle ml-2"
                  ></i>
                </h5>
              </div>
              <div class="media-body">
                <div>
                  Everyone realizes why a new common language would be
                  desirable...
                  <a href="javascript: void(0);">Read more</a>
                </div>
              </div>
            </div>
          </li>
          <li class="event-list active">
            <div class="event-timeline-dot">
              <i
                class="bx bxs-right-arrow-circle font-size-18 bx-fade-right"
              ></i>
            </div>
            <div class="media">
              <div class="mr-3">
                <h5 class="font-size-14">
                  15 Nov
                  <i
                    class="bx bx-right-arrow-alt font-size-16 text-primary align-middle ml-2"
                  ></i>
                </h5>
              </div>
              <div class="media-body">
                <div>Joined the group “Boardsmanship Forum”</div>
              </div>
            </div>
          </li>
          <li class="event-list">
            <div class="event-timeline-dot">
              <i class="bx bx-right-arrow-circle font-size-18"></i>
            </div>
            <div class="media">
              <div class="mr-3">
                <h5 class="font-size-14">
                  12 Nov
                  <i
                    class="bx bx-right-arrow-alt font-size-16 text-primary align-middle ml-2"
                  ></i>
                </h5>
              </div>
              <div class="media-body">
                <div>Responded to need “In-Kind Opportunity”</div>
              </div>
            </div>
          </li>
        </ul>
        <div class="text-center mt-4">
          <a href="javascript: void(0);" class="btn btn-primary btn-sm"
            >Load More</a
          >
        </div>
      </div>
    </div>
  </Loader>
</template>

================
File: components/widgets/earning.vue
================
<script>
import Loader from "./loader";

/**
 * Monthly-Earning component
 */
export default {
  components: {
    Loader
  },
  data() {
    return {
      chartOptions: {
        chart: {
          offsetY: -10
        },
        plotOptions: {
          radialBar: {
            startAngle: -135,
            endAngle: 135,
            dataLabels: {
              name: {
                fontSize: "13px",
                color: undefined,
                offsetY: 60
              },
              value: {
                offsetY: 22,
                fontSize: "16px",
                color: undefined,
                formatter: function(val) {
                  return val + "%";
                }
              }
            }
          }
        },
        colors: ["#556ee6"],
        fill: {
          type: "gradient",
          gradient: {
            shade: "dark",
            shadeIntensity: 0.15,
            inverseColors: false,
            opacityFrom: 1,
            opacityTo: 1,
            stops: [0, 50, 65, 91]
          }
        },
        stroke: {
          dashArray: 4
        },
        labels: ["Series A"]
      },
      series: [67]
    };
  },
  props: {
    updating: {
      type: Boolean,
    },
  },
};
</script>

<template>
<Loader :loading="updating">
  <div class="card">
    <div class="card-body">
      <h4 class="card-title mb-4">Monthly Earning</h4>
      <div class="row">
        <div class="col-sm-6">
          <p class="text-muted">This month</p>
          <h3>$34,252</h3>
          <p class="text-muted">
            <span class="text-success mr-2">
              12%
              <i class="mdi mdi-arrow-up"></i>
            </span> From previous period
          </p>

          <div class="mt-4">
            <a href="javascript: void(0);" class="btn btn-primary btn-sm">
              View More
              <i class="mdi mdi-arrow-right ml-1"></i>
            </a>
          </div>
        </div>
        <div class="col-sm-6">
          <!-- Chart -->
          <apexchart
            class="apex-charts"
            type="radialBar"
            height="250"
            dir="ltr"
            :series="series"
            :options="chartOptions"
          ></apexchart>
        </div>
      </div>
      <p class="text-muted mb-0">We craft digital, graphic and dimensional thinking.</p>
    </div>
  </div>
</Loader>
</template>

================
File: components/widgets/emailsent.vue
================
<script>
import Loader from "./loader";

/**
 * Email-sent component
 */
export default {
   components: {
    Loader
  },
  data() {
    return {
      series: [
        {
          name: "Series A",
          data: [44, 55, 41, 67, 22, 43, 36, 52, 24, 18, 36, 48],
        },
        {
          name: "Series B",
          data: [13, 23, 20, 8, 13, 27, 18, 22, 10, 16, 24, 22],
        },
        {
          name: "Series C",
          data: [11, 17, 15, 15, 21, 14, 11, 18, 17, 12, 20, 18],
        },
      ],
      chartOptions: {
        chart: {
          stacked: true,
          toolbar: {
            show: false,
          },
          zoom: {
            enabled: true,
          },
        },
        plotOptions: {
          bar: {
            horizontal: false,
            columnWidth: "15%",
            endingShape: "rounded",
          },
        },
        dataLabels: {
          enabled: false,
        },
        xaxis: {
          categories: [
            "Jan",
            "Feb",
            "Mar",
            "Apr",
            "May",
            "Jun",
            "Jul",
            "Aug",
            "Sep",
            "Oct",
            "Nov",
            "Dec",
          ],
        },
        colors: ["#556ee6", "#f1b44c", "#34c38f"],
        legend: {
          position: "bottom",
        },
        fill: {
          opacity: 1,
        },
      },
    };
  },
  props: {
    updating: {
      type: Boolean,
    },
  },
};
</script>
<template>
<Loader :loading="updating">
  <div class="card">
    <div class="card-body">
      <div class="float-right">
        <ul class="nav nav-pills">
          <li class="nav-item">
            <a class="nav-link" href="javascript: void(0);">Week</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="javascript: void(0);">Month</a>
          </li>
          <li class="nav-item">
            <a class="nav-link active" href="javascript: void(0);">Year</a>
          </li>
        </ul>
      </div>
      <h4 class="card-title mb-4">Email Sent</h4>

      <apexchart
        class="apex-charts"
        type="bar"
        dir="ltr"
        height="390"
        :series="series"
        :options="chartOptions"
      ></apexchart>
    </div>
  </div>
</Loader>
</template>

================
File: components/widgets/loader.vue
================
<script>
import axios from "axios";

/**
 * Preloader component
 */
export default {
  data() {
    return {};
  },
  props: {
    loading: Boolean,
  },
  mounted() {
    // eslint-disable-next-line no-unused-vars
    axios.get(process.env.VUE_APP_URL).then((res) => {
      setTimeout(() => {
        // you can remove this settimeout method for production or integrating live API.
        document
          .getElementsByClassName("preloader-component")
          .forEach((elem) => {
            elem.style.display = "none";
          });
        document.getElementsByClassName("status").forEach((elem) => {
          elem.style.display = "none";
        });
      }, 1000);
    });
  },
};
</script>

<template>
  <div :class="{ 'is-loading': loading }">
    <div class="preloader-component">
      <div class="status">
        <div class="spinner-chase">
          <div class="chase-dot"></div>
          <div class="chase-dot"></div>
          <div class="chase-dot"></div>
          <div class="chase-dot"></div>
          <div class="chase-dot"></div>
          <div class="chase-dot"></div>
        </div>
      </div>
    </div>
    <slot />
  </div>
</template>

<style scoped>
.is-loading {
  position: relative;
}
.preloader-component {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: #fff;
  z-index: 999;
  width: 100%;
}
.status {
  width: 40px;
  height: 40px;
  position: absolute;
  left: 50%;
  top: 50%;
  margin: -20px 0 0 -20px;
}
</style>

================
File: components/widgets/profile.vue
================
<script>
import Loader from "./loader";
/**
 * Profile component
 */
export default {
  components: {
    Loader
  },
  data() {
    return {
    };
  },
  mounted() {
  },
   props: {
    updating: {
      type: Boolean,
    },
  },
};
</script>
<template>
<Loader :loading="updating">
  <div class="card overflow-hidden">
    <div class="bg-soft-primary">
      <div class="row">
        <div class="col-7">
          <div class="text-primary p-3">
            <h5 class="text-primary">Welcome Back !</h5>
            <p>Skote Dashboard</p>
          </div>
        </div>
        <div class="col-5 align-self-end">
          <img src="@/assets/images/profile-img.png" alt class="img-fluid" />
        </div>
      </div>
    </div>
    <div class="card-body pt-0">
      <div class="row">
        <div class="col-sm-4">
          <div class="avatar-md profile-user-wid mb-4">
            <img
              src="@/assets/images/users/avatar-1.jpg"
              alt
              class="img-thumbnail rounded-circle"
            />
          </div>
          <h5 class="font-size-15 text-truncate">Henry Price</h5>
          <p class="text-muted mb-0 text-truncate">UI/UX Designer</p>
        </div>

        <div class="col-sm-8">
          <div class="pt-4">
            <div class="row">
              <div class="col-6">
                <h5 class="font-size-15">125</h5>
                <p class="text-muted mb-0">Projects</p>
              </div>
              <div class="col-6">
                <h5 class="font-size-15">$1245</h5>
                <p class="text-muted mb-0">Revenue</p>
              </div>
            </div>
            <div class="mt-4">
              <a href class="btn btn-primary btn-sm">
                View Profile
                <i class="mdi mdi-arrow-right ml-1"></i>
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
    <!-- end card-body -->
  </div>
  <!-- end card -->
</Loader>
</template>

================
File: components/widgets/selling-product.vue
================
<script>
import Loader from "./loader";

export default {
  components: {
    Loader,
  },
  props: {
    updating: {
      type: Boolean,
    },
  },
};
</script>

<template>
  <Loader :loading="updating">
    <div class="card">
      <div class="card-body">
        <h4 class="card-title mb-4">Top Cities Selling Product</h4>

        <div class="text-center">
          <div class="mb-4">
            <i class="bx bx-map-pin text-primary display-4"></i>
          </div>
          <h3>1,456</h3>
          <p>San Francisco</p>
        </div>

        <div class="table-responsive mt-4">
          <table class="table table-centered">
            <tbody>
              <tr>
                <td style="width: 140px">
                  <p class="mb-0">San Francisco</p>
                </td>
                <td style="width: 120px">
                  <h5 class="mb-0">1,456</h5>
                </td>
                <td>
                  <b-progress
                    :value="94"
                    variant="primary"
                    height="5px"
                  ></b-progress>
                </td>
              </tr>
              <tr>
                <td>
                  <p class="mb-0">Los Angeles</p>
                </td>
                <td>
                  <h5 class="mb-0">1,123</h5>
                </td>
                <td>
                  <b-progress
                    :value="82"
                    variant="success"
                    height="5px"
                  ></b-progress>
                </td>
              </tr>
              <tr>
                <td>
                  <p class="mb-0">San Diego</p>
                </td>
                <td>
                  <h5 class="mb-0">1,026</h5>
                </td>
                <td>
                  <b-progress
                    :value="70"
                    variant="warning"
                    height="5px"
                  ></b-progress>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </Loader>
</template>

================
File: components/widgets/social-source.vue
================
<script>
import Loader from "./loader";

export default {
  components: {
    Loader,
  },
  props: {
    updating: {
      type: Boolean,
    },
  },
};
</script>

<template>
  <Loader :loading="updating">
    <div class="card">
      <div class="card-body">
        <h4 class="card-title mb-4">Social Source</h4>
        <div class="text-center">
          <div class="avatar-sm mx-auto mb-4">
            <span class="avatar-title rounded-circle bg-primary font-size-18">
              <i class="mdi mdi-facebook text-white"></i>
            </span>
          </div>
          <p class="font-16 text-muted mb-2"></p>
          <h5>
            <a href="javascript: void(0);" class="text-dark">
              Facebook -
              <span class="text-muted font-16">125 sales</span>
            </a>
          </h5>
          <p class="text-muted">
            Maecenas nec odio et ante tincidunt tempus. Donec vitae sapien ut
            libero venenatis faucibus tincidunt.
          </p>
          <a href="javascript: void(0);" class="text-primary font-16">
            Learn more
            <i class="mdi mdi-chevron-right"></i>
          </a>
        </div>
        <div class="row mt-4">
          <div class="col-sm-4">
            <div class="social-source text-center mt-3">
              <div class="avatar-xs mx-auto mb-3">
                <span
                  class="avatar-title rounded-circle bg-primary font-size-16"
                >
                  <i class="mdi mdi-facebook text-white"></i>
                </span>
              </div>
              <h5 class="font-size-15">Facebook</h5>
              <p class="text-muted mb-0">125 sales</p>
            </div>
          </div>
          <div class="col-sm-4">
            <div class="social-source text-center mt-3">
              <div class="avatar-xs mx-auto mb-3">
                <span class="avatar-title rounded-circle bg-info font-size-16">
                  <i class="mdi mdi-twitter text-white"></i>
                </span>
              </div>
              <h5 class="font-size-15">Twitter</h5>
              <p class="text-muted mb-0">112 sales</p>
            </div>
          </div>
          <div class="col-sm-4">
            <div class="social-source text-center mt-3">
              <div class="avatar-xs mx-auto mb-3">
                <span class="avatar-title rounded-circle bg-pink font-size-16">
                  <i class="mdi mdi-instagram text-white"></i>
                </span>
              </div>
              <h5 class="font-size-15">Instagram</h5>
              <p class="text-muted mb-0">104 sales</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </Loader>
</template>

================
File: components/widgets/stat.vue
================
<script>
/**
 * Stat component -- specify the widget icon, title and value.
 */
export default {
  props: {
    title: {
      type: String,
      default: ""
    },
    value: {
      type: String,
      default: ""
    },
    icon: {
      type: String,
      default: ""
    }
  }
};
</script>

<template>
  <div class="card mini-stats-wid">
    <div class="card-body">
      <div class="media">
        <div class="media-body">
          <p class="text-muted font-weight-medium">{{title}}</p>
          <h4 class="mb-0">{{value}}</h4>
        </div>

        <div class="mini-stat-icon avatar-sm align-self-center rounded-circle bg-primary">
          <span class="avatar-title">
            <i :class="`${icon} font-size-24`"></i>
          </span>
        </div>
      </div>
    </div>
    <!-- end card-body -->
  </div>
  <!-- end card -->
</template>

================
File: components/widgets/transaction.vue
================
<script>
import Loader from "./loader";

/**
 * Transactions component
 */
export default {
  components: {
    Loader,
  },
  props: {
    transactions: {
      type: Array,
      default: function () {
        return [];
      },
    },
    updating: {
      type: Boolean,
    },
  },
  data() {
    return {
      showModal: false,
    };
  },
};
</script>

<template>
  <Loader :loading="updating">
    <div class="table-responsive mb-0">
      <table class="table table-centered table-nowrap">
        <thead class="thead-light">
          <tr>
            <th style="width: 20px">
              <div class="custom-control custom-checkbox">
                <input
                  id="customCheck"
                  type="checkbox"
                  class="custom-control-input"
                />
                <label class="custom-control-label" for="customCheck"
                  >&nbsp;</label
                >
              </div>
            </th>
            <th>Order ID</th>
            <th>Billing Name</th>
            <th>Date</th>
            <th>Total</th>
            <th>Payment Status</th>
            <th>Payment Method</th>
            <th>View Details</th>
          </tr>
        </thead>
        <tbody>
          <tr v-for="data in transactions" :key="data.id">
            <td>
              <div class="custom-control custom-checkbox">
                <input
                  :id="`customCheck${data.index}`"
                  type="checkbox"
                  class="custom-control-input"
                />
                <label
                  class="custom-control-label"
                  :for="`customCheck${data.index}`"
                  >&nbsp;</label
                >
              </div>
            </td>
            <td>
              <a
                href="javascript: void(0);"
                class="text-body font-weight-bold"
                >{{ data.id }}</a
              >
            </td>
            <td>{{ data.name }}</td>
            <td>{{ data.date }}</td>
            <td>{{ data.total }}</td>
            <td>
              <span
                class="badge badge-pill badge-soft-success font-size-12"
                :class="{
                  'badge-soft-danger': `${data.status}` === 'Chargeback',
                  'badge-soft-warning': `${data.status}` === 'Refund',
                }"
                >{{ data.status }}</span
              >
            </td>
            <td>
              <i :class="`fab ${data.payment[0]} mr-1`"></i>
              {{ data.payment[1] }}
            </td>
            <td>
              <!-- Button trigger modal -->
              <button
                type="button"
                class="btn btn-primary btn-sm btn-rounded"
                @click="showModal = true"
              >
                View Details
              </button>
            </td>
          </tr>
        </tbody>
      </table>
      <b-modal v-model="showModal" title="Order Details" centered>
        <p class="mb-2">
          Product id:
          <span class="text-primary">#SK2540</span>
        </p>
        <p class="mb-4">
          Billing Name:
          <span class="text-primary">Neal Matthews</span>
        </p>
        <div class="table-responsive">
          <table class="table table-centered table-nowrap">
            <thead>
              <tr>
                <th scope="col">Product</th>
                <th scope="col">Product Name</th>
                <th scope="col">Price</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <th scope="row">
                  <div>
                    <img
                      src="@/assets/images/product/img-7.png"
                      alt
                      class="avatar-sm"
                    />
                  </div>
                </th>
                <td>
                  <div>
                    <h5 class="text-truncate font-size-14">
                      Wireless Headphone (Black)
                    </h5>
                    <p class="text-muted mb-0">$ 225 x 1</p>
                  </div>
                </td>
                <td>$ 255</td>
              </tr>
              <tr>
                <th scope="row">
                  <div>
                    <img
                      src="@/assets/images/product/img-4.png"
                      alt
                      class="avatar-sm"
                    />
                  </div>
                </th>
                <td>
                  <div>
                    <h5 class="text-truncate font-size-14">
                      Phone patterned cases
                    </h5>
                    <p class="text-muted mb-0">$ 145 x 1</p>
                  </div>
                </td>
                <td>$ 145</td>
              </tr>
              <tr>
                <td colspan="2">
                  <h6 class="m-0 text-right">Sub Total:</h6>
                </td>
                <td>$ 400</td>
              </tr>
              <tr>
                <td colspan="2">
                  <h6 class="m-0 text-right">Shipping:</h6>
                </td>
                <td>Free</td>
              </tr>
              <tr>
                <td colspan="2">
                  <h6 class="m-0 text-right">Total:</h6>
                </td>
                <td>$ 400</td>
              </tr>
            </tbody>
          </table>
        </div>
        <template v-slot:modal-footer>
          <b-button variant="secondary" @click="showModal = false"
            >Close</b-button
          >
        </template>
      </b-modal>
    </div>
    <!-- end table -->
  </Loader>
</template>

================
File: router/views/account/forgot-password.vue
================
<script>
import axios from "axios";

import Layout from "../../layouts/auth";
import { authMethods } from "@/state/helpers";
import appConfig from "@/app.config";

import { required, email } from "vuelidate/lib/validators";

/**
 * Forgot Password component
 */
export default {
  page: {
    title: "Forgot Password",
    meta: [
      {
        name: "description",
        content: appConfig.description,
      },
    ],
  },
  components: {
    Layout,
  },
  data() {
    return {
      email: "",
      submitted: false,
      error: null,
      tryingToReset: false,
      isResetError: false,
    };
  },
  validations: {
    email: {
      required,
      email,
    },
  },
  methods: {
    ...authMethods,
    // Try to register the user in with the email, fullname
    // and password they provided.
    tryToReset() {
      this.submitted = true;
      // stop here if form is invalid
      this.$v.$touch();

      if (this.$v.$invalid) {
        return;
      } else {
        if (process.env.VUE_APP_DEFAULT_AUTH === "firebase") {
          this.tryingToReset = true;
          // Reset the authError if it existed.
          this.error = null;
          return (
            this.resetPassword({
              email: this.email,
            })
              // eslint-disable-next-line no-unused-vars
              .then((token) => {
                this.tryingToReset = false;
                this.isResetError = false;
              })
              .catch((error) => {
                this.tryingToReset = false;
                this.error = error ? error : "";
                this.isResetError = true;
              })
          );
        } else if (process.env.VUE_APP_DEFAULT_AUTH === "authapi") {
          axios
            .post("http://127.0.0.1:8000/api/password/create", {
              email: this.email,
            })
            .then((res) => {
              this.isResetError = true;
              this.error = res.data;
              return res;
            });
        }
      }
    },
  },
};
</script>

<template>
  <Layout>
    <div class="row justify-content-center">
      <div class="col-md-8 col-lg-6 col-xl-5">
        <div class="card overflow-hidden">
          <div class="bg-soft-primary">
            <div class="row">
              <div class="col-7">
                <div class="text-primary p-4">
                  <h5 class="text-primary">Reset Password</h5>
                  <p>Re-Password with Arcadia.</p>
                </div>
              </div>
              <div class="col-5 align-self-end">
                <img
                  src="@/assets/images/profile-img.png"
                  alt
                  class="img-fluid"
                />
              </div>
            </div>
          </div>
          <div class="card-body pt-0">
            <div>
              <router-link tag="a" to="/">
                <div class="avatar-md profile-user-wid mb-4">
                  <span class="avatar-title rounded-circle bg-light">
                    <img src="@/assets/images/logo.svg" alt height="34" />
                  </span>
                </div>
              </router-link>
            </div>

            <div class="p-2">
              <b-alert
                v-model="isResetError"
                class="mb-4"
                variant="danger"
                dismissible
                >{{ error }}</b-alert
              >
              <form @submit.prevent="tryToReset">
                <div class="form-group">
                  <label for="useremail">Email</label>
                  <input
                    type="email"
                    v-model="email"
                    class="form-control"
                    id="useremail"
                    placeholder="Enter email"
                    :class="{ 'is-invalid': submitted && $v.email.$error }"
                  />
                  <div
                    v-if="submitted && $v.email.$error"
                    class="invalid-feedback"
                  >
                    <span v-if="!$v.email.required">Email is required.</span>
                    <span v-if="!$v.email.email"
                      >Please enter valid email.</span
                    >
                  </div>
                </div>
                <div class="form-group row mb-0">
                  <div class="col-12 text-right">
                    <button class="btn btn-primary w-md" type="submit">
                      Reset
                    </button>
                  </div>
                </div>
              </form>
            </div>
          </div>
          <!-- end card-body -->
        </div>
        <!-- end card -->

        <div class="mt-5 text-center">
          <p>
            Remember It ?
            <router-link
              tag="a"
              to="/login"
              class="font-weight-medium text-primary"
              >Sign In here</router-link
            >
          </p>
          <p>
            © {{ new Date().getFullYear() }} Arcadia Crypto.
            <i class="mdi mdi-heart text-danger"></i> by Sorin
          </p>
        </div>
      </div>
      <!-- end col -->
    </div>
    <!-- end row -->
  </Layout>
</template>

<style lang="scss" module></style>

================
File: router/views/account/login.vue
================
<script>
import Layout from "../../layouts/auth";
import {
  authMethods,
  notificationMethods,
} from "@/state/helpers";

import appConfig from "@/app.config";
import { required, email } from "vuelidate/lib/validators";

/**
 * Login component
 */


export default {
  page: {
    title: "Login",
    meta: [
      {
        name: "description",
        content: appConfig.description,
      },
    ],
  },
  components: {
    Layout,
  },
  data() {
    return {
      email: "",
      password: "",
      submitted: false,
      authError: '',
      tryingToLogIn: false,
      isAuthError: false,
    };
  },
  validations: {
    email: {
      required,
      email,
    },
    password: {
      required,
    },
  },
  computed: {
    notification() {
      return this.$store ? this.$store.state.notification : null;
    },
  },
  methods: {
    ...authMethods,
    ...notificationMethods,
    // Try to log the user in with the username
    // and password they provided.
    async tryToLogIn() {
      this.submitted = true;
      // stop here if form is invalid

      this.$v.$touch();
      if (this.$v.$invalid) {
        return;
      } else {
        this.tryingToLogIn = true;
        const { status, msg }  = (await this.logIn({email: this.email, password: this.password}));


        if (status == 'success') {
          this.tryingToLogIn = false;
          this.isAuthError = false;
          // Redirect to the originally requested page, or to the home page
          this.$router.push(
                  this.$route.query.redirectFrom || {
                    name: "default",
                  }
          );
        } else {
          this.tryingToLogIn = false;
          this.authError = msg || "Something went wrong";
          this.isAuthError = true;
        }

      }
    },
  },
  mounted() {},
};
</script>

<template>
  <Layout>
    <div class="row justify-content-center">
      <div class="col-md-8 col-lg-6 col-xl-5">
        <div class="card overflow-hidden">
          <div class="bg-soft-primary">
            <div class="row">
              <div class="col-7">
                <div class="text-primary p-4">
                  <h5 class="text-primary">Welcome Back !</h5>
                  <p>Sign in to continue to Arcadia Finance.</p>
                </div>
              </div>
              <div class="col-5 align-self-end">
                <img
                  src="@/assets/images/profile-img.png"
                  alt
                  class="img-fluid"
                />
              </div>
            </div>
          </div>
          <div class="card-body pt-0">
            <div>
              <router-link tag="a" to="/">
                <div class="avatar-md profile-user-wid mb-4">
                  <span class="avatar-title rounded-circle bg-light">
                    <img src="@/assets/images/logo.svg" alt height="34" />
                  </span>
                </div>
              </router-link>
            </div>
            <b-alert
              v-model="isAuthError"
              variant="danger"
              class="mt-3"
              dismissible
              >{{ authError }}</b-alert
            >

            <div
              v-if="notification.message"
              :class="'alert ' + notification.type"
            >
              {{ notification.message }}
            </div>

            <b-form class="p-2" @submit.prevent="tryToLogIn">
              <b-form-group
                id="input-group-1"
                label="Email"
                label-for="input-1"
              >
                <b-form-input
                  id="input-1"
                  v-model="email"
                  type="text"
                  placeholder="Enter email"
                  :class="{ 'is-invalid': submitted && $v.email.$error }"
                ></b-form-input>
                <div
                  v-if="submitted && $v.email.$error"
                  class="invalid-feedback"
                >
                  <span v-if="!$v.email.required">Email is required.</span>
                  <span v-if="!$v.email.email">Please enter valid email.</span>
                </div>
              </b-form-group>

              <b-form-group
                id="input-group-2"
                label="Password"
                label-for="input-2"
              >
                <b-form-input
                  id="input-2"
                  v-model="password"
                  type="password"
                  placeholder="Enter password"
                  :class="{ 'is-invalid': submitted && $v.password.$error }"
                ></b-form-input>
                <div
                  v-if="submitted && !$v.password.required"
                  class="invalid-feedback"
                >
                  Password is required.
                </div>
              </b-form-group>
              <div class="custom-control custom-checkbox">
                <input
                  id="customControlInline"
                  type="checkbox"
                  class="custom-control-input"
                />
              </div>
              <div class="mt-3">
                <b-button type="submit" variant="primary" class="btn-block"
                  >Log In</b-button
                >
              </div>
              <div class="mt-4 text-center">
                <router-link tag="a" to="/forgot-password" class="text-muted">
                  <i class="mdi mdi-lock mr-1"></i> Forgot your password?
                </router-link>
              </div>
            </b-form>
          </div>
          <!-- end card-body -->
        </div>

        <!-- end row -->
      </div>
      <!-- end col -->
    </div>
    <b-modal v-model="tryingToLogIn"  title="Checking credentials" centered hide-footer>
      <div class="text-center">
        <b-spinner label="Spinning" />
      </div>
    </b-modal>
    <!-- end row -->
  </Layout>
</template>

<style lang="scss" module></style>

================
File: router/views/account/register.vue
================
<script>
import axios from "axios";

import {
  authMethods,
  authFackMethods,
  notificationMethods,
} from "@/state/helpers";
import Layout from "../../layouts/auth";
import appConfig from "@/app.config";
import { mapState } from "vuex";

import { required, email } from "vuelidate/lib/validators";

/**
 * Register component
 */
export default {
  page: {
    title: "Register",
    meta: [
      {
        name: "description",
        content: appConfig.description,
      },
    ],
  },
  components: {
    Layout,
  },
  data() {
    return {
      user: {
        username: "",
        email: "",
        password: "",
      },
      submitted: false,
      regError: null,
      tryingToRegister: false,
      isRegisterError: false,
      registerSuccess: false,
    };
  },
  validations: {
    user: {
      username: {
        required,
      },
      email: {
        required,
        email,
      },
      password: {
        required,
      },
    },
  },
  computed: {
    ...mapState("authfack", ["status"]),
    notification() {
      return this.$store ? this.$store.state.notification : null;
    },
  },
  methods: {
    ...authMethods,
    ...authFackMethods,
    ...notificationMethods,
    // Try to register the user in with the email, username
    // and password they provided.
    tryToRegisterIn() {
      this.submitted = true;
      // stop here if form is invalid
      this.$v.$touch();

      if (this.$v.$invalid) {
        return;
      } else {
        if (process.env.VUE_APP_DEFAULT_AUTH === "firebase") {
          this.tryingToRegister = true;
          // Reset the regError if it existed.
          this.regError = null;
          return (
            this.register({
              email: this.user.email,
              password: this.user.password,
            })
              // eslint-disable-next-line no-unused-vars
              .then((token) => {
                this.tryingToRegister = false;
                this.isRegisterError = false;
                this.registerSuccess = true;
                if (this.registerSuccess) {
                  this.$router.push(
                    this.$route.query.redirectFrom || {
                      name: "default",
                    }
                  );
                }
              })
              .catch((error) => {
                this.tryingToRegister = false;
                this.regError = error ? error : "";
                this.isRegisterError = true;
              })
          );
        } else if (process.env.VUE_APP_DEFAULT_AUTH === "fakebackend") {
          const { email, username, password } = this.user;
          if (email && username && password) {
            this.registeruser(this.user);
          }
        } else if (process.env.VUE_APP_DEFAULT_AUTH === "authapi") {
          axios
            .post("http://127.0.0.1:8000/api/register", {
              username: this.user.username,
              email: this.user.email,
              password: this.user.password,
            })
            .then((res) => {
              return res;
            });
        }
      }
    },
  },
};
</script>

<template>
  <Layout>
    <div class="row justify-content-center">
      <div class="col-md-8 col-lg-6 col-xl-5">
        <div class="card overflow-hidden">
          <div class="bg-soft-primary">
            <div class="row">
              <div class="col-7">
                <div class="text-primary p-4">
                  <h5 class="text-primary">Free Register</h5>
                  <p>Get your free Skote account now.</p>
                </div>
              </div>
              <div class="col-5 align-self-end">
                <img
                  src="@/assets/images/profile-img.png"
                  alt
                  class="img-fluid"
                />
              </div>
            </div>
          </div>
          <div class="card-body pt-0">
            <div>
              <router-link tag="a" to="/">
                <div class="avatar-md profile-user-wid mb-4">
                  <span class="avatar-title rounded-circle bg-light">
                    <img
                      src="@/assets/images/logo.svg"
                      alt
                      class="rounded-circle"
                      height="34"
                    />
                  </span>
                </div>
              </router-link>
            </div>

            <b-alert
              v-model="registerSuccess"
              class="mt-3"
              variant="success"
              dismissible
              >Registration successfull.</b-alert
            >

            <b-alert
              v-model="isRegisterError"
              class="mt-3"
              variant="danger"
              dismissible
              >{{ regError }}</b-alert
            >

            <div
              v-if="notification.message"
              :class="'alert ' + notification.type"
            >
              {{ notification.message }}
            </div>

            <b-form class="p-2" @submit.prevent="tryToRegisterIn">
              <b-form-group
                id="email-group"
                label="Username"
                label-for="username"
              >
                <b-form-input
                  id="username"
                  v-model="user.username"
                  type="text"
                  placeholder="Enter username"
                  :class="{
                    'is-invalid': submitted && $v.user.username.$error,
                  }"
                ></b-form-input>
                <div
                  v-if="submitted && !$v.user.username.required"
                  class="invalid-feedback"
                >
                  Username is required.
                </div>
              </b-form-group>

              <b-form-group id="fullname-group" label="Email" label-for="email">
                <b-form-input
                  id="email"
                  v-model="user.email"
                  type="email"
                  placeholder="Enter email"
                  :class="{ 'is-invalid': submitted && $v.user.email.$error }"
                ></b-form-input>
                <div
                  v-if="submitted && $v.user.email.$error"
                  class="invalid-feedback"
                >
                  <span v-if="!$v.user.email.required">Email is required.</span>
                  <span v-if="!$v.user.email.email"
                    >Please enter valid email.</span
                  >
                </div>
              </b-form-group>

              <b-form-group
                id="password-group"
                label="Password"
                label-for="password"
              >
                <b-form-input
                  id="password"
                  v-model="user.password"
                  type="password"
                  placeholder="Enter password"
                  :class="{
                    'is-invalid': submitted && $v.user.password.$error,
                  }"
                ></b-form-input>
                <div
                  v-if="submitted && !$v.user.password.required"
                  class="invalid-feedback"
                >
                  Password is required.
                </div>
              </b-form-group>

              <div class="mt-4">
                <b-button type="submit" variant="primary" class="btn-block"
                  >Register</b-button
                >
              </div>

              <div class="mt-4 text-center">
                <h5 class="font-size-14 mb-3">Sign in with</h5>

                <ul class="list-inline">
                  <li class="list-inline-item">
                    <a
                      href="javascript: void(0);"
                      class="social-list-item bg-primary text-white border-primary"
                    >
                      <i class="mdi mdi-facebook"></i>
                    </a>
                  </li>
                  <li class="list-inline-item">
                    <a
                      href="javascript: void(0);"
                      class="social-list-item bg-info text-white border-info"
                    >
                      <i class="mdi mdi-twitter"></i>
                    </a>
                  </li>
                  <li class="list-inline-item">
                    <a
                      href="javascript: void(0);"
                      class="social-list-item bg-danger text-white border-danger"
                    >
                      <i class="mdi mdi-google"></i>
                    </a>
                  </li>
                </ul>
              </div>

              <div class="mt-4 text-center">
                <p class="mb-0">
                  By registering you agree to the Skote
                  <a href="javascript: void(0);" class="text-primary"
                    >Terms of Use</a
                  >
                </p>
              </div>
            </b-form>
          </div>
          <!-- end card-body -->
        </div>
        <!-- end card -->

        <div class="mt-5 text-center">
          <p>
            Already have an account ?
            <router-link
              tag="a"
              to="/login"
              class="font-weight-medium text-primary"
              >Login</router-link
            >
          </p>
          <p>
            © {{ new Date().getFullYear() }} Skote. Crafted with
            <i class="mdi mdi-heart text-danger"></i> by Themesbrand
          </p>
        </div>
      </div>
      <!-- end col -->
    </div>
    <!-- end row -->
  </Layout>
</template>

<style lang="scss" module></style>

================
File: router/views/utility/404.vue
================
<script>
import appConfig from "@/app.config";

export default {
  page: {
    title: "404 Error Page",
    meta: [{ name: "description", content: appConfig.description }]
  },
}
</script>
<template>
  <div class="account-pages my-5 pt-5">
    <div class="container">
      <div class="row">
        <div class="col-lg-12">
          <div class="text-center mb-5">
            <h1 class="display-2 font-weight-medium">
              4<i class="bx bx-buoy bx-spin text-primary display-3"></i>4
            </h1>
            <h4 class="text-uppercase">Sorry, page not found</h4>
            <div class="mt-5 text-center">
              <router-link tag="a" class="btn btn-primary" to="/">Back to root</router-link>
            </div>
          </div>
        </div>
      </div>
      <div class="row justify-content-center">
        <div class="col-md-8 col-xl-6">
          <div>
            <img src="@/assets/images/error-img.png" alt class="img-fluid" />
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

================
File: router/views/utility/500.vue
================
<script>
import appConfig from "@/app.config";

export default {
  page: {
    title: "500 Error Page",
    meta: [{ name: "description", content: appConfig.description }]
  },
};
</script>
 <template>
  <div class="account-pages my-5 pt-5">
    <div class="container">
      <div class="row">
        <div class="col-lg-12">
          <div class="text-center mb-5">
            <h1 class="display-2 font-weight-medium">
              5<i class="bx bx-buoy bx-spin text-primary display-3"></i>0
            </h1>
            <h4 class="text-uppercase">Internal Server Error</h4>
            <div class="mt-5 text-center">
              <router-link tag="a" class="btn btn-primary" to="/">Back to Dashboard</router-link>
            </div>
          </div>
        </div>
      </div>
      <div class="row justify-content-center">
        <div class="col-md-8 col-xl-6">
          <div>
            <img src="@/assets/images/error-img.png" alt class="img-fluid" />
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

================
File: router/views/utility/data-pricing.js
================
const pricingData = [
    {
        name: 'Starter',
        text: 'Neque quis est',
        icon: 'bx-walk',
        price: 19
    },
    {
        name: 'Professional',
        text: 'Quis autem iure',
        icon: 'bx-run',
        price: 29
    },
    {
        name: 'Enterprise',
        text: 'Sed ut neque unde',
        icon: 'bx-cycling',
        price: 39
    },
    {
        name: 'Unlimited',
        text: 'Itaque earum hic',
        icon: 'bx-car',
        price: 49
    },
];

export { pricingData };

================
File: router/views/utility/faqs.vue
================
<script>
import Layout from "../../layouts/main";
import PageHeader from "@/components/page-header";
import appConfig from "@/app.config";

/**
 * FAQs component
 */
export default {
  page: {
    title: "FAQs",
    meta: [{ name: "description", content: appConfig.description }]
  },
  components: { Layout, PageHeader },
  data() {
    return {
      title: "FAQs",
      items: [
        {
          text: "Utility",
          href: "/"
        },
        {
          text: "FAQs",
          active: true
        }
      ]
    };
  }
};
</script>
<template>
  <Layout>
    <PageHeader :title="title" :items="items" />
    <div class="checkout-tabs">
      <b-tabs pills vertical nav-class="p-0" nav-wrapper-class="col-lg-2 w-100">
        <b-tab active>
          <template v-slot:title>
            <i class="bx bx-question-mark d-block check-nav-icon mt-4 mb-2"></i>
            <p class="font-weight-bold mb-4">General Questions</p>
          </template>
          <b-card-text>
            <div class="card">
              <div class="card-body">
                <div class="tab-pane fade show active">
                  <h4 class="card-title mb-5">General Questions</h4>
                  <div class="faq-box media mb-4">
                    <div class="faq-icon mr-3">
                      <i class="bx bx-help-circle font-size-20 text-success"></i>
                    </div>
                    <div class="media-body">
                      <h5 class="font-size-15">What is Lorem Ipsum?</h5>
                      <p
                        class="text-muted"
                      >New common language will be more simple and regular than the existing European languages. It will be as simple as occidental.</p>
                    </div>
                  </div>
                  <div class="faq-box media mb-4">
                    <div class="faq-icon mr-3">
                      <i class="bx bx-help-circle font-size-20 text-success"></i>
                    </div>
                    <div class="media-body">
                      <h5 class="font-size-15">Where does it come from?</h5>
                      <p
                        class="text-muted"
                      >Everyone realizes why a new common language would be desirable one could refuse to pay expensive translators.</p>
                    </div>
                  </div>
                  <div class="faq-box media mb-4">
                    <div class="faq-icon mr-3">
                      <i class="bx bx-help-circle font-size-20 text-success"></i>
                    </div>
                    <div class="media-body">
                      <h5 class="font-size-15">Where can I get some?</h5>
                      <p
                        class="text-muted"
                      >If several languages coalesce, the grammar of the resulting language is more simple and regular than that of the individual languages.</p>
                    </div>
                  </div>
                  <div class="faq-box media mb-4">
                    <div class="faq-icon mr-3">
                      <i class="bx bx-help-circle font-size-20 text-success"></i>
                    </div>
                    <div class="media-body">
                      <h5 class="font-size-15">Why do we use it?</h5>
                      <p
                        class="text-muted"
                      >Their separate existence is a myth. For science, music, sport, etc, Europe uses the same vocabulary.</p>
                    </div>
                  </div>
                  <div class="faq-box media">
                    <div class="faq-icon mr-3">
                      <i class="bx bx-help-circle font-size-20 text-success"></i>
                    </div>
                    <div class="media-body">
                      <h5 class="font-size-15">Where can I get some?</h5>
                      <p
                        class="text-muted"
                      >To an English person, it will seem like simplified English, as a skeptical Cambridge friend of mine told me what Occidental</p>
                    </div>
                  </div>
                </div>
              </div>
              <!-- end card-body -->
            </div>
            <!-- end card -->
          </b-card-text>
        </b-tab>
        <b-tab>
          <template v-slot:title>
            <i class="bx bx-check-shield d-block check-nav-icon mt-4 mb-2"></i>
            <p class="font-weight-bold mb-4">Privacy Policy</p>
          </template>
          <b-card-text>
            <div class="card">
              <div class="card-body">
                <div class="tab-pane">
                  <h4 class="card-title mb-5">Privacy Policy</h4>

                  <div class="faq-box media mb-4">
                    <div class="faq-icon mr-3">
                      <i class="bx bx-help-circle font-size-20 text-success"></i>
                    </div>
                    <div class="media-body">
                      <h5 class="font-size-15">Where does it come from?</h5>
                      <p
                        class="text-muted"
                      >Everyone realizes why a new common language would be desirable one could refuse to pay expensive translators.</p>
                    </div>
                  </div>
                  <div class="faq-box media mb-4">
                    <div class="faq-icon mr-3">
                      <i class="bx bx-help-circle font-size-20 text-success"></i>
                    </div>
                    <div class="media-body">
                      <h5 class="font-size-15">Where can I get some?</h5>
                      <p
                        class="text-muted"
                      >To an English person, it will seem like simplified English, as a skeptical Cambridge friend of mine told me what Occidental</p>
                    </div>
                  </div>
                  <div class="faq-box media mb-4">
                    <div class="faq-icon mr-3">
                      <i class="bx bx-help-circle font-size-20 text-success"></i>
                    </div>
                    <div class="media-body">
                      <h5 class="font-size-15">What is Lorem Ipsum?</h5>
                      <p
                        class="text-muted"
                      >New common language will be more simple and regular than the existing European languages. It will be as simple as occidental.</p>
                    </div>
                  </div>
                  <div class="faq-box media mb-4">
                    <div class="faq-icon mr-3">
                      <i class="bx bx-help-circle font-size-20 text-success"></i>
                    </div>
                    <div class="media-body">
                      <h5 class="font-size-15">Why do we use it?</h5>
                      <p
                        class="text-muted"
                      >Their separate existence is a myth. For science, music, sport, etc, Europe uses the same vocabulary.</p>
                    </div>
                  </div>
                  <div class="faq-box media">
                    <div class="faq-icon mr-3">
                      <i class="bx bx-help-circle font-size-20 text-success"></i>
                    </div>
                    <div class="media-body">
                      <h5 class="font-size-15">Where can I get some?</h5>
                      <p
                        class="text-muted"
                      >If several languages coalesce, the grammar of the resulting language is more simple and regular than that of the individual languages.</p>
                    </div>
                  </div>
                </div>
              </div>
              <!-- end card-body -->
            </div>
            <!-- end card -->
          </b-card-text>
        </b-tab>
        <b-tab title-item-class="mb-2">
          <template v-slot:title>
            <i class="bx bx-support d-block check-nav-icon mt-4 mb-2"></i>
            <p class="font-weight-bold mb-4">Support</p>
          </template>
          <b-card-text>
            <div class="card">
              <div class="card-body">
                <div class="tab-pane">
                  <h4 class="card-title mb-5">Support</h4>

                  <div class="faq-box media mb-4">
                    <div class="faq-icon mr-3">
                      <i class="bx bx-help-circle font-size-20 text-success"></i>
                    </div>
                    <div class="media-body">
                      <h5 class="font-size-15">Where can I get some?</h5>
                      <p
                        class="text-muted"
                      >To an English person, it will seem like simplified English, as a skeptical Cambridge friend of mine told me what Occidental</p>
                    </div>
                  </div>
                  <div class="faq-box media mb-4">
                    <div class="faq-icon mr-3">
                      <i class="bx bx-help-circle font-size-20 text-success"></i>
                    </div>
                    <div class="media-body">
                      <h5 class="font-size-15">Where does it come from?</h5>
                      <p
                        class="text-muted"
                      >Everyone realizes why a new common language would be desirable one could refuse to pay expensive translators.</p>
                    </div>
                  </div>

                  <div class="faq-box media mb-4">
                    <div class="faq-icon mr-3">
                      <i class="bx bx-help-circle font-size-20 text-success"></i>
                    </div>
                    <div class="media-body">
                      <h5 class="font-size-15">Why do we use it?</h5>
                      <p
                        class="text-muted"
                      >Their separate existence is a myth. For science, music, sport, etc, Europe uses the same vocabulary.</p>
                    </div>
                  </div>
                  <div class="faq-box media mb-4">
                    <div class="faq-icon mr-3">
                      <i class="bx bx-help-circle font-size-20 text-success"></i>
                    </div>
                    <div class="media-body">
                      <h5 class="font-size-15">Where can I get some?</h5>
                      <p
                        class="text-muted"
                      >If several languages coalesce, the grammar of the resulting language is more simple and regular than that of the individual languages.</p>
                    </div>
                  </div>

                  <div class="faq-box media">
                    <div class="faq-icon mr-3">
                      <i class="bx bx-help-circle font-size-20 text-success"></i>
                    </div>
                    <div class="media-body">
                      <h5 class="font-size-15">What is Lorem Ipsum?</h5>
                      <p
                        class="text-muted"
                      >New common language will be more simple and regular than the existing European languages. It will be as simple as occidental.</p>
                    </div>
                  </div>
                </div>
              </div>
              <!-- end card-body -->
            </div>
            <!-- end card -->
          </b-card-text>
        </b-tab>
      </b-tabs>
    </div>
  </Layout>
</template>

================
File: router/views/utility/maintenance.vue
================
<script>
import appConfig from "@/app.config";

export default {
    page: {
        title: "Maintenance",
        meta: [{
            name: "description",
            content: appConfig.description
        }],
    },
};
</script>
<template>
<div>
    <div class="home-btn d-none d-sm-block">
        <router-link tag="a" to="/" class="text-dark">
            <i class="fas fa-home h2"></i>
        </router-link>
    </div>
    <section class="my-5 pt-5">
        <div class="container">
            <div class="row">
                <div class="col-12 text-center">
                    <div class="home-wrapper">
                        <div class="mb-5">
                            <img src="@/assets/images/logo-dark.png" alt="logo" height="24" />
                        </div>

                        <div class="row justify-content-center">
                            <div class="col-sm-4">
                                <div class="maintenance-img">
                                    <img src="@/assets/images/maintenance.png" alt class="img-fluid mx-auto d-block" />
                                </div>
                            </div>
                        </div>
                        <h3 class="mt-5">Site is Under Maintenance</h3>
                        <p>Please check back in sometime.</p>

                        <div class="row">
                            <div class="col-md-4">
                                <div class="card mt-4 maintenance-box">
                                    <div class="card-body">
                                        <i class="bx bx-broadcast mb-4 h1 text-primary"></i>
                                        <h5 class="font-size-15 text-uppercase">
                                            Why is the Site Down?
                                        </h5>
                                        <p class="text-muted mb-0">
                                            There are many variations of passages of Lorem Ipsum
                                            available, but the majority have suffered alteration.
                                        </p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="card mt-4 maintenance-box">
                                    <div class="card-body">
                                        <i class="bx bx-time-five mb-4 h1 text-primary"></i>
                                        <h5 class="font-size-15 text-uppercase">
                                            What is the Downtime?
                                        </h5>
                                        <p class="text-muted mb-0">
                                            Contrary to popular belief, Lorem Ipsum is not simply
                                            random text. It has roots in a piece of classical.
                                        </p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="card mt-4 maintenance-box">
                                    <div class="card-body">
                                        <i class="bx bx-envelope mb-4 h1 text-primary"></i>
                                        <h5 class="font-size-15 text-uppercase">
                                            Do you need Support?
                                        </h5>
                                        <p class="text-muted mb-0">
                                            If you are going to use a passage of Lorem Ipsum, you
                                            need to be sure there isn't anything embar..
                                            <a href="mailto:no-reply@domain.com" class="text-decoration-underline">no-reply@domain.com</a>
                                        </p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- end row -->
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>
</template>

================
File: router/views/utility/pricing.vue
================
<script>
import Layout from '../../layouts/main'
import PageHeader from '@/components/page-header'
import appConfig from "@/app.config";

import { pricingData } from './data-pricing'

/**
 * Pricing component
 */
export default {
  page: {
    title: "Pricing",
    meta: [{ name: "description", content: appConfig.description }]
  },
  components: { Layout, PageHeader },
  data() {
    return {
      pricingData: pricingData,
      title: 'Pricing',
      items: [
        {
          text: 'Utility',
          href: '/',
        },
        {
          text: 'Pricing',
          active: true,
        },
      ],
    }
  },
}
</script>
<template>
  <Layout>
    <PageHeader :title="title" :items="items" />
    <div class="row justify-content-center">
      <div class="col-lg-6">
        <div class="text-center mb-5">
          <h4>Choose your Pricing plan</h4>
          <p
            class="text-muted"
          >To achieve this, it would be necessary to have uniform grammar, pronunciation and more common words If several languages coalesce</p>
        </div>
      </div>
    </div>
    <div class="row">
      <div v-for="data in pricingData" :key="data.price" class="col-xl-3 col-md-6">
        <div class="card plan-box">
          <div class="card-body p-4">
            <div class="media">
              <div class="media-body">
                <h5>{{data.name}}</h5>
                <p class="text-muted">{{data.text}}</p>
              </div>
              <div class="ml-3">
                <i :class="`bx ${data.icon} h1 text-primary`"></i>
              </div>
            </div>
            <div class="py-4">
              <h2>
                <sup>
                  <small>$</small>
                </sup>
                {{data.price}}/
                <span class="font-size-13">Per month</span>
              </h2>
            </div>
            <div class="text-center plan-btn">
              <a
                href="javascript: void(0);"
                class="btn btn-primary btn-sm position-relative"
              >Sign up Now</a>
            </div>

            <div class="plan-features mt-5">
              <p>
                <i class="bx bx-checkbox-square text-primary mr-2"></i> Free Live Support
              </p>
              <p>
                <i class="bx bx-checkbox-square text-primary mr-2"></i> Unlimited User
              </p>
              <p>
                <i class="bx bx-checkbox-square text-primary mr-2"></i> No Time Tracking
              </p>
              <p>
                <i class="bx bx-checkbox-square text-primary mr-2"></i> Free Setup
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </Layout>
</template>

================
File: router/views/utility/starter.vue
================
<script>
import Layout from "../../layouts/main";
import PageHeader from "@/components/page-header";
import appConfig from "@/app.config";

/**
 * Starter component
 */
export default {
  page: {
    title: "Starter Page",
    meta: [{ name: "description", content: appConfig.description }]
  },
  components: { Layout, PageHeader },
  data() {
    return {
      title: "Starter Page",
      items: [
        {
          text: "Utility",
          href: "/"
        },
        {
          text: "Starter Page",
          active: true
        }
      ]
    };
  }
};
</script>
<template>
  <Layout>
    <PageHeader :title="title" :items="items" />
  </Layout>
</template>

================
File: router/views/utility/timeline.vue
================
<script>
import { Carousel, Slide } from "vue-carousel";

import Layout from "../../layouts/main";
import PageHeader from "@/components/page-header";
import appConfig from "@/app.config";

/**
 * Timeline component
 */
export default {
  page: {
    title: "Timeline",
    meta: [{ name: "description", content: appConfig.description }]
  },
  components: { Layout, PageHeader, Carousel, Slide },
  data() {
    return {
      title: "Timeline",
      items: [
        {
          text: "Utility",
          href: "/"
        },
        {
          text: "Timeline",
          active: true
        }
      ]
    };
  },
  methods: {
    nextSlide() {
      this.$refs.carousel.goToPage(this.$refs.carousel.getNextPage());
    },
    prevSlide() {
      this.$refs.carousel.goToPage(this.$refs.carousel.getPreviousPage());
    }
  }
};
</script>

<template>
  <Layout>
    <PageHeader :title="title" :items="items" />
    <div class="row">
      <div class="col-lg-12">
        <div class="card">
          <div class="card-body">
            <h4 class="card-title mb-4">Horizontal Timeline</h4>

            <div class="hori-timeline">
              <carousel
                ref="carousel"
                class="events navs-carousel"
                id="timeline-carousel"
                :navigation-enabled="false"
                :pagination-enabled="false"
                :perPageCustom="[[480, 2], [768, 4]]"
              >
                <slide>
                  <div class="item event-list">
                    <div>
                      <div class="event-date">
                        <div class="text-primary mb-1">12 September</div>
                        <h5 class="mb-4">First event</h5>
                      </div>
                      <div class="event-down-icon">
                        <i class="bx bx-down-arrow-circle h1 text-primary down-arrow-icon"></i>
                      </div>

                      <div class="mt-3 px-3">
                        <p class="text-muted">
                          It will be as simple as occidental in fact it will be
                          Cambridge
                        </p>
                      </div>
                    </div>
                  </div>
                </slide>
                <slide>
                  <div class="item event-list">
                    <div>
                      <div class="event-date">
                        <div class="text-primary mb-1">06 October</div>
                        <h5 class="mb-4">Second event</h5>
                      </div>
                      <div class="event-down-icon">
                        <i class="bx bx-down-arrow-circle h1 text-primary down-arrow-icon"></i>
                      </div>

                      <div class="mt-3 px-3">
                        <p class="text-muted">
                          To an English person, it will seem like simplified
                          English
                          existence.
                        </p>
                      </div>
                    </div>
                  </div>
                </slide>
                <slide>
                  <div class="item event-list active">
                    <div>
                      <div class="event-date">
                        <div class="text-primary mb-1">06 October</div>
                        <h5 class="mb-4">Third event</h5>
                      </div>
                      <div class="event-down-icon">
                        <i class="bx bx-down-arrow-circle h1 text-primary down-arrow-icon"></i>
                      </div>

                      <div class="mt-3 px-3">
                        <p class="text-muted">
                          For science, music, sport, etc, Europe uses the same
                          vocabulary.
                        </p>
                      </div>
                    </div>
                  </div>
                </slide>
                <slide>
                  <div class="item event-list">
                    <div>
                      <div class="event-date">
                        <div class="text-primary mb-1">04 November</div>
                        <h5 class="mb-4">Fourth event</h5>
                      </div>
                      <div class="event-down-icon">
                        <i class="bx bx-down-arrow-circle h1 text-primary down-arrow-icon"></i>
                      </div>

                      <div class="mt-3 px-3">
                        <p class="text-muted">New common language will be more simple than existing.</p>
                      </div>
                    </div>
                  </div>
                </slide>
                <slide>
                  <div class="item event-list">
                    <div>
                      <div class="event-date">
                        <div class="text-primary mb-1">19 November</div>
                        <h5 class="mb-4">Fifth event</h5>
                      </div>
                      <div class="event-down-icon">
                        <i class="bx bx-down-arrow-circle h1 text-primary down-arrow-icon"></i>
                      </div>

                      <div class="mt-3 px-3">
                        <p class="text-muted">
                          It will be as simple as occidental in fact it will be
                          Cambridge
                        </p>
                      </div>
                    </div>
                  </div>
                </slide>
                <slide>
                  <div class="item event-list">
                    <div>
                      <div class="event-date">
                        <div class="text-primary mb-1">21 December</div>
                        <h5 class="mb-4">Sixth event</h5>
                      </div>
                      <div class="event-down-icon">
                        <i class="bx bx-down-arrow-circle h1 text-primary down-arrow-icon"></i>
                      </div>

                      <div class="mt-3 px-3">
                        <p class="text-muted">
                          To an English person, it will seem like simplified
                          English
                          existence.
                        </p>
                      </div>
                    </div>
                  </div>
                </slide>
              </carousel>
              <div class="owl-nav">
                <button
                  type="button"
                  role="presentation"
                  class="owl-prev"
                  @click.prevent="prevSlide"
                >
                  <i class="mdi mdi-chevron-left"></i>
                </button>
                <button
                  type="button"
                  role="presentation"
                  class="owl-next"
                  @click.prevent="nextSlide"
                >
                  <i class="mdi mdi-chevron-right"></i>
                </button>
              </div>
            </div>
          </div>
        </div>
        <!-- end card -->
      </div>
    </div>
    <!-- end row -->

    <div class="row">
      <div class="col-lg-12">
        <div class="card">
          <div class="card-body">
            <h4 class="card-title mb-5">Vertical Timeline</h4>
            <div class>
              <ul class="verti-timeline list-unstyled">
                <li class="event-list">
                  <div class="event-timeline-dot">
                    <i class="bx bx-right-arrow-circle"></i>
                  </div>
                  <div class="media">
                    <div class="mr-3">
                      <i class="bx bx-copy-alt h2 text-primary"></i>
                    </div>
                    <div class="media-body">
                      <div>
                        <h5>Ordered</h5>
                        <p
                          class="text-muted"
                        >New common language will be more simple and regular than the existing.</p>
                      </div>
                    </div>
                  </div>
                </li>
                <li class="event-list">
                  <div class="event-timeline-dot">
                    <i class="bx bx-right-arrow-circle"></i>
                  </div>
                  <div class="media">
                    <div class="mr-3">
                      <i class="bx bx-package h2 text-primary"></i>
                    </div>
                    <div class="media-body">
                      <div>
                        <h5>Packed</h5>
                        <p
                          class="text-muted"
                        >To achieve this, it would be necessary to have uniform grammar.</p>
                      </div>
                    </div>
                  </div>
                </li>
                <li class="event-list active">
                  <div class="event-timeline-dot">
                    <i class="bx bx-right-arrow-circle bx-fade-right"></i>
                  </div>
                  <div class="media">
                    <div class="mr-3">
                      <i class="bx bx-car h2 text-primary"></i>
                    </div>
                    <div class="media-body">
                      <div>
                        <h5>Shipped</h5>
                        <p
                          class="text-muted"
                        >It will be as simple as Occidental in fact, it will be Occidental..</p>
                      </div>
                    </div>
                  </div>
                </li>
                <li class="event-list">
                  <div class="event-timeline-dot">
                    <i class="bx bx-right-arrow-circle"></i>
                  </div>
                  <div class="media">
                    <div class="mr-3">
                      <i class="bx bx-badge-check h2 text-primary"></i>
                    </div>
                    <div class="media-body">
                      <div>
                        <h5>Delivered</h5>
                        <p
                          class="text-muted"
                        >To an English person, it will seem like simplified English.</p>
                      </div>
                    </div>
                  </div>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  </Layout>
</template>

================
File: router/views/crypto/exchange/data.js
================
const priceCandlestickChart = {
    chartOptions: {
        chart: {
            type: 'candlestick',
            height: 310,
            toolbar: false,
            zoom: {
                enabled: true,
            }
        },
        plotOptions: {
            candlestick: {
                colors: {
                    upward: '#34c38f',
                    downward: '#f46a6a'
                }
            }
        },
        xaxis: {
            type: 'datetime'
        },
        yaxis: {
            decimalsInFloat: 0,
            tooltip: {
                enabled: true
            }
        }
    }
};

const notificationData = [
    {
        id: 1,
        date: '15 Mar ',
        text: 'If several languages coalesce of the resulting.'
    },
    {
        id: 2,
        date: '14 Mar ',
        text: 'New common language will be more simple and regular than the existing'
    },
    {
        id: 3,
        date: '10 Mar',
        text: 'It will seem like simplified English as a skeptical Cambridge'
    },
    {
        id: 4,
        date: '13 Mar',
        text: 'To achieve this, it would be necessary'
    },
    {
        id: 5,
        date: '12 Mar ',
        text: 'Cum sociis natoque penatibus et magnis dis'
    },
    {
        id: 6,
        date: '11 Mar ',
        text: 'New common language will be more simple and regular than the existing'
    },
    {
        id: 7,
        date: '10 Mar ',
        text: 'It will seem like simplified English as a skeptical Cambridge'
    },
    {
        id: 8,
        date: '09 Mar ',
        text: 'To achieve this, it would be necessary'
    },
];

export { priceCandlestickChart, notificationData };

================
File: router/views/crypto/exchange/index.vue
================
<script>
import Layout from "../../../layouts/main";
import appConfig from "@/app.config";
import PageHeader from "@/components/page-header";
import { mapActions } from 'vuex';
import AIChatbot from '@/components/AIChatbot.vue';

import { priceCandlestickChart, notificationData } from "./data";

/**
 * Exchange component
 */
export default {
  page: {
    title: "Exchange",
    meta: [{ name: "description", content: appConfig.description }]
  },
  components: { Layout, PageHeader, AIChatbot },
  methods: {
    ...mapActions('stock',['getAllStockCandles','stockTransaction']),
    ...mapActions('transaction',['getAllTransactions']),
    async makeStockTransaction() {
      this.transactionModal.loading = true;
      this.transactionModal.details = null;
      this.transactionModal.show = true;
      const result = await this.stockTransaction({
        symbol:this.transaction.crypto,
        transactionType: this.transaction.type == 0 ? 'buy' : 'sell',
        amount: this.transaction.amount
      });

      this.transactionModal.details = result;
      this.transactionModal.loading = false;
    },
    resetTransactionModal() {
      this.transactionModal.show = false;
    },
    onFiltered(filteredItems) {
      // Trigger pagination to update the number of buttons/pages due to filtering
      this.totalRows = filteredItems.length;
      this.currentPage = 1;
    },

  },
  computed: {
    cryptoPrice() {
      return this.$store.state.stock[this.transaction.crypto].ticker[this.transaction.type == 0 ? 'ask' : 'bid']
    },
    totalValue() {
      return this.cryptoPrice * this.transaction.amount;
    },
    allReady() {
      return !!this.$store.state.stock.btc.ticker && !!this.$store.state.stock.btc.candles;
    },
    transactionModalMsg() {
      if (this.transactionModal.details.status == 'success') {
        return `Transaction ${this.transactionModal.details.transactionId} successful`;
      } else if (this.transactionModal.details.status == 'fail') {
        return this.transactionModal.details.reason;
      } else {
        return 'ERROR, please try again later'
      }
    },
    transactionModalColor() {
      if (this.transactionModal.details && this.transactionModal.details.status == 'success') {
        return 'outline-success';
      } else {
        return 'outline-danger';
      }
    },
    rows() {
      return this.$store.state.transaction.allTransactions.length;
    },
  },
  mounted() {
    this.getAllStockCandles();
    this.getAllTransactions();
  },
  data() {
    return {
      transactionModal: {
        show: false,
        loading: true,
        details: null
      },
      transactionTypes: ['Buy','Sell'],
      transaction: {
        type: 0,
        crypto: 'btc',
        amount: null
      },
      totalRows: 1,
      currentPage: 1,
      perPage: 10,
      pageOptions: [10, 25, 50, 100],
      filter: null,
      filterOn: [],
      sortBy: "date",
      sortDesc: true,
      fields: [{
        key: "transactionId",
        label: 'ID'
        },
        {
          key: "symbol",
          sortable: true,
          label: 'Crypto',
          formatter:  (value) => value.toUpperCase()
        },
        {
          key: "amount",
          label: 'Crypto Amount'
        },
        {
          key: "transactionType",
          sortable: true,
          label: 'Type',
          formatter:  (value) => value.toUpperCase()

        },
        {
          key: "price",
          label: 'Unit Price'
        },
        {
          key: "totalValue",
          label: 'Total Value'
        },
        {
          key: "date",
          sortable: true,
          label: 'Date',
          formatter:  (value) => new Date(value)
        },
      ],
      priceCandlestickChart: priceCandlestickChart,
      notificationData: notificationData,
      title: "Exchange",
      items: [
        {
          text: "Crypto",
          href: "/"
        },
        {
          text: "Exchange",
          active: true
        }
      ]
    };
  }
};
</script>

<template>
  <Layout v-if="allReady">
    <PageHeader :title="title" :items="items" />
    <div class="row">
      <div class="col-lg-12">
        <div class="card">
          <div class="card-body">
            <div class="media">
              <div class="mr-3">
                <img
                  src="@/assets/images/users/avatar-2.jpg"
                  alt
                  class="avatar-md rounded-circle img-thumbnail"
                />
              </div>
              <div class="media-body align-self-center">
                <div class="text-muted">
                  <h5>{{ this.$store.state.auth.currentUser.name }}</h5>
                  <p class="mb-1">{{ this.$store.state.auth.currentUser.email }}</p>
                  <p class="mb-0">Account Id: {{ this.$store.state.auth.currentUser.accountId }}</p>
                </div>
              </div>
              <b-dropdown ngbDropdown menu-class="dropdown-menu-md" right variant="light">
                <template v-slot:button-content>
                  <i class="mdi mdi-wallet mr-1"></i>
                  <span class="d-none d-sm-inline-block" ngbDropdownToggle>
                    Wallet Balance
                    <i class="mdi mdi-chevron-down"></i>
                  </span>
                </template>

                <div class="dropdown-item-text">
                  <div>
                    <p class="text-muted mb-2">Available Balance</p>
                    <h5 class="mb-0">$ {{ this.$store.state.auth.currentUser.cash }}</h5>
                  </div>
                </div>
                <b-dropdown-divider></b-dropdown-divider>
                <b-dropdown-item>
                  BTC :
                  <span class="float-right">{{ this.$store.state.auth.currentUser.stocks.btc || 0}}</span>
                </b-dropdown-item>
                <b-dropdown-item>
                  ETH :
                  <span class="float-right">{{ this.$store.state.auth.currentUser.stocks.eth  || 0 }}</span>
                </b-dropdown-item>
                <b-dropdown-item>
                  LTC :
                  <span class="float-right">{{ this.$store.state.auth.currentUser.stocks.ltc || 0 }}</span>
                </b-dropdown-item>
                <b-dropdown-divider></b-dropdown-divider>
                <a
                  class="dropdown-item text-primary text-center"
                  href="javascript: void(0);"
                >Learn more</a>
              </b-dropdown>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="row">
      <div class="col-xl-8">
        <div class="card">
          <div class="card-body">
            <h4 class="card-title mb-4">Candle chart for {{ transaction.crypto.toUpperCase() }}</h4>

            <div class="mt-4">
              <apexchart
                class="apex-charts"
                height="310"
                type="candlestick"
                dir="ltr"
                :series="this.$store.state.stock[this.transaction.crypto].candles"
                :options="priceCandlestickChart.chartOptions"
              ></apexchart>
            </div>
          </div>
        </div>
      </div>

      <div class="col-xl-4">
        <div class="card">
          <div class="card-body">
            <h4 class="card-title mb-4">Buy / Sell</h4>

            <div>
              <p class="text-muted mb-2">
                <i class="mdi mdi-wallet mr-1"></i> Wallet Balance
              </p>
              <h5>$ {{ this.$store.state.auth.currentUser.cash }}</h5>
            </div>

            <div class="mt-4">
              <b-tabs nav-class="bg-light rounded" pills content-class="mt-4" v-model="transaction.type">
                <b-tab
                       v-for="tType in transactionTypes"
                       :title="tType"
                       :key="tType"                       
                >
                  <h5 class="font-size-14 mb-4">{{ tType }} Coin</h5>
                  <div>
                    <div>
                      <label>Add Amount :</label>
                      <div class="input-group mb-3">
                        <div class="input-group-prepend">
                          <label class="input-group-text">Amount</label>
                        </div>
                        <select id="select_transaction" class="custom-select" style="max-width: 90px;" v-model="transaction.crypto">
                          <option value="btc" selected>BTC</option>
                          <option value="eth">ETH</option>
                          <option value="ltc">LTC</option>
                        </select>
                        <input type="number" id="amount" class="form-control" placeholder="Input here the amount"  v-model="transaction.amount"/>
                      </div>

                      <div class="input-group mb-3">
                        <div class="input-group-prepend">
                          <label class="input-group-text">Price</label>
                        </div>
                        <input type="number" class="form-control" :value="cryptoPrice" readonly/>
                        <div class="input-group-append">
                          <label class="input-group-text">$</label>
                        </div>
                      </div>

                      <div class="input-group mb-3">
                        <div class="input-group-prepend">
                          <label class="input-group-text">Total</label>
                        </div>
                        <input type="number" class="form-control" :value="totalValue" readonly/>
                      </div>
                    </div>

                    <div class="text-center">
                      <button type="button" class="btn btn-success w-md" @click="makeStockTransaction">{{ tType }} Coin</button>
                    </div>

                  </div>
                </b-tab>
              </b-tabs>
              <b-modal v-model="transactionModal.show" title="Crypto Transaction" centered hide-footer>
                <div class="text-center">
                  <b-spinner label="Spinning" v-if="transactionModal.loading == true" />
                  <div class="center-block" v-else>{{ transactionModalMsg }}</div>

                  <b-button class="mt-3" :variant="transactionModalColor" block @click="resetTransactionModal">Done</b-button>

                </div>

              </b-modal>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="row">
      <div class="col-lg-12">
        <div class="card">
          <div class="card-body">
            <h4 class="card-title mb-4">Activities</h4>
            <b-tabs content-class="mt-3" nav-class="nav-tabs-custom">
              <b-tab title="All" active>
                <div class="row mt-4">
                  <div class="col-sm-12 col-md-6">
                    <div id="tickets-table_length" class="dataTables_length">
                      <label class="d-inline-flex align-items-center">
                        Show&nbsp;
                        <b-form-select v-model="perPage" size="sm" :options="pageOptions"></b-form-select>&nbsp;entries
                      </label>
                    </div>
                  </div>
                  <!-- Search -->
                  <div class="col-sm-12 col-md-6">
                    <div id="tickets-table_filter" class="dataTables_filter text-md-right">
                      <label class="d-inline-flex align-items-center">
                        Search:
                        <b-form-input v-model="filter" type="search" placeholder="Search..." class="form-control form-control-sm ml-2"></b-form-input>
                      </label>
                    </div>
                  </div>
                  <!-- End search -->
                </div>
                <!-- Table -->
                <div class="table-responsive table-hover mb-0">
                  <b-table :items="this.$store.state.transaction.allTransactions" :fields="fields" responsive="sm" :per-page="perPage" :current-page="currentPage" :sort-by.sync="sortBy" :sort-desc.sync="sortDesc" :filter="filter" :filter-included-fields="filterOn" @filtered="onFiltered"></b-table>
                </div>
                <div class="row">
                  <div class="col">
                    <div class="dataTables_paginate paging_simple_numbers float-right">
                      <ul class="pagination pagination-rounded mb-0">
                        <!-- pagination -->
                        <b-pagination v-model="currentPage" :total-rows="rows" :per-page="perPage"></b-pagination>
                      </ul>
                    </div>
                  </div>
                </div>
              </b-tab>
            </b-tabs>
          </div>
        </div>
      </div>
    </div>
    <AIChatbot />
  </Layout>
</template>

================
File: router/views/crypto/wallet/index.vue
================
<script>
import Layout from "../../../layouts/main";
import appConfig from "@/app.config";
import PageHeader from "@/components/page-header";
import { authComputed } from "@/state/helpers";
import {mapActions} from "vuex";


export default {
    page: {
        title: "Wallets",
        meta: [{
            name: "description",
            content: appConfig.description,
        }, ],
    },
    components: {
        Layout,
        PageHeader,
    },
    data() {
        return {
            user: this.$store.state.auth.currentUser,
            title: "Wallets",
            items: [{
                    text: "Crypto",
                    href: "/",
                },
                {
                    text: "Wallets",
                    active: true,
                },
            ],
            totalRows: 1,
            currentPage: 1,
            perPage: 10,
            pageOptions: [10, 25, 50, 100],
            filter: null,
            filterOn: [],
            sortBy: "date",
            sortDesc: true,
            fields: [{
                key: "transactionId",
                label: 'ID'
            },
                {
                    key: "symbol",
                    sortable: true,
                    label: 'Crypto',
                    formatter:  (value) => value.toUpperCase()
                },
                {
                    key: "amount",
                    label: 'Crypto Amount'
                },
                {
                    key: "transactionType",
                    sortable: true,
                    label: 'Type',
                    formatter:  (value) => value.toUpperCase()

                },
                {
                    key: "price",
                    label: 'Unit Price'
                },
                {
                    key: "totalValue",
                    label: 'Total Value'
                },
                {
                    key: "date",
                    sortable: true,
                    label: 'Date',
                    formatter:  (value) => new Date(value)
                },
            ],
            chartValue: {
                series: [],
                options: {
                    labels: ['Available Balance','BTC','ETH','LTC'],

                    plotOptions: {
                        pie: {
                            donut: {
                                labels: {
                                    show: true,
                                    total: {
                                        show:true,
                                        formatter: () => {
                                            const tmp = this.chartValueSeries.reduce((accumulator, currentValue) => accumulator + currentValue);
                                            return (Math.round(tmp * 100) / 100);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        };
    },
    computed: {
        rows() {
            return this.$store.state.transaction.allTransactions.length;
        },
        allReady() {
            return !!this.$store.state.stock.btc.ticker && !!this.$store.state.transaction.allTransactions;
        },
        chartValueSeries() {
            return [this.user.cash, this.cryptoValue('btc'), this.cryptoValue('eth'), this.cryptoValue('ltc')]
        },
        returnImage() {
            if (this.$store.state.auth.currentUser.picture)
                return `data:image/jpeg;base64,${this.$store.state.auth.currentUser.picture}`;
            else {
                return '<i class="mdi mdi-account-circle text-primary h1"></i>';
            }
        }
    },
    mounted() {
        // Set the initial number of items
        this.getAllTransactions();
        this.totalRows = this.items.length;
        this.chartValue.series = [this.user.cash, this.cryptoValue('btc'), this.cryptoValue('eth'), this.cryptoValue('ltc')];
    },
    methods: {
        ...authComputed,
        ...mapActions('transaction',['getAllTransactions']),
        cryptoValue(symbol) {
            if (!this.$store.state.stock[symbol].ticker) {
                return 'Calculating'
            } else {
                const symbolAmount = this.user.stocks[symbol] || 0;
                const result = Math.round(symbolAmount * this.$store.state.stock[symbol].ticker.bid * 100) / 100;

                return result;
            }
        },
        /**
         * Search the table data with search input
         */
        onFiltered(filteredItems) {
            // Trigger pagination to update the number of buttons/pages due to filtering
            this.totalRows = filteredItems.length;
            this.currentPage = 1;
        },
    },
};
</script>

<template>
<Layout v-if="allReady">
    <PageHeader :title="title" :items="items" />
    <div class="row">
        <div class="col-xl-4">
            <div class="card">
                <div class="card-body">
                    <div class="media">
                        <div class="mr-4">
                            <img
                                    class="rounded-circle header-profile-user"
                                    src="@/assets/images/users/avatar-2.jpg"
                                    alt="Header Avatar"
                            />
                        </div>

                        <div class="media-body">
                            <div class="text-muted">
                                <h5>{{ user.name }}</h5>
                                <p class="mb-1"> {{ user.email }}</p>
                                <p class="mb-0">Account Id: {{ user.accountId }}</p>
                            </div>
                        </div>

                        <b-dropdown class="ml-2 p-0" right variant="white" toggle-class="p-0">
                            <template v-slot:button-content>
                                <i class="mdi mdi-dots-horizontal font-size-18"></i>
                            </template>
                            <b-dropdown-item>Action</b-dropdown-item>
                            <b-dropdown-item>Another action</b-dropdown-item>
                            <b-dropdown-item>Something else here</b-dropdown-item>
                        </b-dropdown>
                    </div>
                </div>
                <div class="card-body border-top">
                    <div class="row">
                        <div class="col-sm-6">
                            <div>
                                <p class="text-muted mb-2">Available Balance</p>
                                <h5>$ {{ user.cash }}</h5>
                            </div>
                        </div>
                    </div>
                </div>


            </div>
        </div>

        <div class="col-xl-8">
            <div class="row">
                <div class="col-sm-4">
                    <div class="card mini-stats-wid">
                        <div class="card-body">
                            <div class="media">
                                <div class="mr-3 align-self-center">
                                    <i class="mdi mdi-bitcoin h2 text-warning mb-0"></i>
                                </div>
                                <div class="media-body">
                                    <p class="text-muted mb-2">Bitcoin Wallet</p>
                                    <h5 class="mb-0">
                                        {{ user.stocks.btc || 0 }} BTC
                                        <span class="font-size-14 text-muted"> = $ {{ cryptoValue('btc') }} </span>
                                    </h5>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="card mini-stats-wid">
                        <div class="card-body">
                            <div class="media">
                                <div class="mr-3 align-self-center">
                                    <i class="mdi mdi-ethereum h2 text-primary mb-0"></i>
                                </div>
                                <div class="media-body">
                                    <p class="text-muted mb-2">Ethereum Wallet</p>
                                    <h5 class="mb-0">
                                        {{ user.stocks.eth || 0 }} ETH
                                        <span class="font-size-14 text-muted"> = $ {{ cryptoValue('eth') }} </span>
                                    </h5>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="card mini-stats-wid">
                        <div class="card-body">
                            <div class="media">
                                <div class="mr-3 align-self-center">
                                    <i class="mdi mdi-litecoin h2 text-info mb-0"></i>
                                </div>
                                <div class="media-body">
                                    <p class="text-muted mb-2">Litecoin Wallet</p>
                                    <h5 class="mb-0">
                                        {{ user.stocks.ltc || 0 }} LTC
                                        <span class="font-size-14 text-muted"> = $ {{ cryptoValue('ltc') }} </span>
                                    </h5>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- end row -->

            <div class="card">
                <div class="card-body">
                    <h4 class="card-title mb-3">Account Value</h4>

                    <div>
                        <div id="overview-chart" class="apex-charts" dir="ltr"></div>
                        <apexchart height="240" type="donut" :options="chartValue.options" :series="chartValueSeries"></apexchart>

                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- end row -->
    <div class="row">
        <div class="col-lg-12">
            <div class="card">
                <div class="card-body">
                    <h4 class="card-title mb-4">Activities</h4>
                    <b-tabs content-class="mt-3" nav-class="nav-tabs-custom">
                        <b-tab title="All" active>
                            <div class="row mt-4">
                                <div class="col-sm-12 col-md-6">
                                    <div id="tickets-table_length" class="dataTables_length">
                                        <label class="d-inline-flex align-items-center">
                                            Show&nbsp;
                                            <b-form-select v-model="perPage" size="sm" :options="pageOptions"></b-form-select>&nbsp;entries
                                        </label>
                                    </div>
                                </div>
                                <!-- Search -->
                                <div class="col-sm-12 col-md-6">
                                    <div id="tickets-table_filter" class="dataTables_filter text-md-right">
                                        <label class="d-inline-flex align-items-center">
                                            Search:
                                            <b-form-input v-model="filter" type="search" placeholder="Search..." class="form-control form-control-sm ml-2"></b-form-input>
                                        </label>
                                    </div>
                                </div>
                                <!-- End search -->
                            </div>
                            <!-- Table -->
                            <div class="table-responsive table-hover mb-0">
                                <b-table :items="this.$store.state.transaction.allTransactions" :fields="fields" responsive="sm" :per-page="perPage" :current-page="currentPage" :sort-by.sync="sortBy" :sort-desc.sync="sortDesc" :filter="filter" :filter-included-fields="filterOn" @filtered="onFiltered"></b-table>
                            </div>
                            <div class="row">
                                <div class="col">
                                    <div class="dataTables_paginate paging_simple_numbers float-right">
                                        <ul class="pagination pagination-rounded mb-0">
                                            <!-- pagination -->
                                            <b-pagination v-model="currentPage" :total-rows="rows" :per-page="perPage"></b-pagination>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </b-tab>
                    </b-tabs>
                </div>
            </div>
        </div>
    </div>
</Layout>
</template>

================
File: router/views/crypto/kycapplication/index.vue
================
<script>
import { FormWizard, TabContent } from "vue-form-wizard";
import vue2Dropzone from "vue2-dropzone";

import Layout from "../../../layouts/main";
import appConfig from "@/app.config";
import PageHeader from "@/components/page-header";

/**
 * KYC Application component
 */
export default {
  page: {
    title: "KYC Application",
    meta: [{ name: "description", content: appConfig.description }]
  },
  components: {
    Layout,
    PageHeader,
    vueDropzone: vue2Dropzone,
    FormWizard,
    TabContent
  },
  data() {
    return {
      title: "KYC Application",
      items: [
        {
          text: "Crypto",
          href: "/"
        },
        {
          text: "KYC Application",
          active: true
        }
      ],
      dropzoneOptions: {
        url: "https://httpbin.org/post",
        thumbnailWidth: 120,
        maxFilesize: 0.5,
        headers: { "My-Awesome-Header": "header value" }
      }
    };
  }
};
</script>

<template>
  <Layout>
    <PageHeader :title="title" :items="items" />
    <div class="row justify-content-center mt-lg-5">
      <div class="col-xl-5 col-sm-8">
        <div class="card">
          <div class="card-body">
            <div class="text-center">
              <div class="row justify-content-center">
                <div class="col-lg-10">
                  <h4 class="mt-4 font-weight-semibold">KYC Verification</h4>
                  <p
                    class="text-muted mt-3"
                  >Itaque earum rerum hic tenetur a sapiente delectus ut aut reiciendis perferendis asperiores repellat.</p>
                  <div class="mt-4">
                    <!-- Button trigger modal -->
                    <button
                      type="button"
                      class="btn btn-primary"
                      v-b-modal.verificationModal
                      data-toggle="modal"
                      data-target="#verificationModal"
                    >Click here for Verification</button>
                  </div>
                </div>
                <div class="row justify-content-center mt-5 mb-2">
                  <div class="col-sm-6 col-8">
                    <div>
                      <img src="@/assets/images/verification-img.png" alt class="img-fluid" />
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <b-modal id="verificationModal" size="lg" centered title="Verify your Account" hide-footer>
      <form-wizard shape="tab" color="#556ee6">
        <tab-content icon="mdi mdi-account-circle" title="Personal Info" class="kyc-wizard">
          <form>
            <div class="row">
              <div class="col-lg-6">
                <div class="form-group">
                  <label for="kycfirstname-input">First name</label>
                  <input
                    type="text"
                    class="form-control"
                    id="kycfirstname-input"
                    placeholder="Enter First name"
                  />
                </div>
              </div>
              <div class="col-lg-6">
                <div class="form-group">
                  <label for="kyclastname-input">Last name</label>
                  <input
                    type="text"
                    class="form-control"
                    id="kyclastname-input"
                    placeholder="Enter Last name"
                  />
                </div>
              </div>
            </div>

            <div class="row">
              <div class="col-lg-6">
                <div class="form-group">
                  <label for="kycphoneno-input">Phone</label>
                  <input
                    type="text"
                    class="form-control"
                    id="kycphoneno-input"
                    placeholder="Enter Phone number"
                  />
                </div>
              </div>
              <div class="col-lg-6">
                <div class="form-group">
                  <label for="kycbirthdate-input">Date of birth</label>
                  <input
                    type="text"
                    class="form-control"
                    id="kycbirthdate-input"
                    placeholder="Enter Date of birth"
                  />
                </div>
              </div>
            </div>
            <div class="row">
              <div class="col-lg-12">
                <div class="form-group">
                  <label for="kycselectcity-input">City</label>
                  <select class="custom-select" id="kycselectcity-input">
                    <option value="1" selected>San Francisco</option>
                    <option value="2">Los Angeles</option>
                    <option value="3">San Diego</option>
                  </select>
                </div>
              </div>
            </div>
          </form>
        </tab-content>
        <tab-content icon="mdi mdi-email" title="Confirm Email" class="kyc-wizard">
          <form>
            <div class="row">
              <div class="col-lg-12">
                <div class="form-group">
                  <label for="kycemail-input">Email</label>
                  <input
                    type="email"
                    class="form-control"
                    id="kycemail-input"
                    placeholder="Enter Email Address"
                  />
                </div>

                <div class="form-group">
                  <label for="kycconfirmcode-input">Confirm code</label>
                  <input
                    type="email"
                    class="form-control"
                    id="kycconfirmcode-input"
                    placeholder="Enter Confirm code"
                  />
                </div>

                <div class="mb-3">
                  Didn't recieve code ?
                  <button type="button" class="btn btn-link">Resend Code</button>
                </div>
              </div>
            </div>
          </form>
        </tab-content>
        <tab-content
          icon="mdi mdi-checkbox-marked-circle-outline"
          title="Document Verification"
          class="kyc-wizard"
        >
          <h5 class="font-size-14 mb-3">Upload document file for a verification</h5>
          <div class="kyc-doc-verification">
            <vue-dropzone
              id="dropzone"
              ref="myVueDropzone"
              :use-custom-slot="true"
              :options="dropzoneOptions"
            >
              <div class="dropzone-custom-content">
                <i class="display-4 text-muted bx bxs-cloud-upload"></i>
                <h4>Drop files here or click to upload.</h4>
              </div>
            </vue-dropzone>
            <!-- end row -->
          </div>
        </tab-content>
      </form-wizard>
    </b-modal>
  </Layout>
</template>

================
File: router/views/crypto/orders/data.js
================
const ordersData = [
    {
        status: 'Completed',
        date: '03 Mar, 2020',
        type: 'Buy',
        coin: 'Bitcoin',
        value: '1.00952 BTC',
        usd: '$ 9067.62'
    },
    {
        status: 'Completed',
        date: '04 Mar, 2020',
        type: 'Buy',
        coin: 'Litecoin',
        value: '0.00214 LTC',
        usd: '$ 9067.62'
    },
    {
        status: 'Pending',
        date: '05 Mar, 2020',
        type: 'Sell',
        coin: 'Bitcoin',
        value: '1.00952 BTC',
        usd: '$ 9067.62'
    },
    {
        status: 'Completed',
        date: '03 Mar, 2020',
        type: 'Sell',
        coin: 'Ethereum',
        value: '0.00413 ETH',
        usd: '$ 2123.01'
    },
    {
        status: 'Completed',
        date: '08 Mar, 2020',
        type: 'Buy',
        coin: 'Litecoin',
        value: '1.00124 LTC',
        usd: '$ 1802.62'
    },
    {
        status: 'Pending',
        date: '06 Mar, 2020',
        type: 'Sell',
        coin: 'Ethereum',
        value: '0.00413 ETH',
        usd: '$ 2123.01'
    },
    {
        status: 'Failed',
        date: '05 Mar, 2020',
        type: 'Buy',
        coin: 'Bitcoin',
        value: '1.00952 BTC',
        usd: '$ 9067.62'
    },
    {
        status: 'Completed',
        date: '03 Mar, 2020',
        type: 'Buy',
        coin: 'Ethereum',
        value: '0.00413 ETH',
        usd: '$ 2123.01'
    },
    {
        status: 'Pending',
        date: '10 Mar, 2020',
        type: 'Buy',
        coin: 'Bitcoin',
        value: '1.00952 BTC',
        usd: '$ 9067.62'
    },
    {
        status: 'Pending',
        date: '18 Mar, 2020',
        type: 'Buy',
        coin: 'Litecoin',
        value: '0.00224 LTC',
        usd: '$ 1773.01'
    },
    {
        status: 'Completed',
        date: '03 Mar, 2020',
        type: 'Buy',
        coin: 'Bitcoin',
        value: '1.00952 BTC',
        usd: '$ 9423.73'
    },
    {
        status: 'Pending',
        date: '15 Mar, 2020',
        type: 'Sell',
        coin: 'Ethereum',
        value: '0.00413 ETH',
        usd: '$ 2123.01'
    },
    {
        status: 'Completed',
        date: '03 Mar, 2020',
        type: 'Sell',
        coin: 'Bitcoin',
        value: '1.00952 BTC',
        usd: '$ 9067.62'
    },
    {
        status: 'Failed',
        date: '01 Mar, 2020',
        type: 'Sell',
        coin: 'Litecoin',
        value: '1.00217 LTC',
        usd: '$ 9067.62'
    }
]

export { ordersData };

================
File: router/views/crypto/orders/index.vue
================
<script>
import DatePicker from "vue2-datepicker";

import Layout from "../../../layouts/main";
import appConfig from "@/app.config";
import PageHeader from "@/components/page-header";

import {
    ordersData
} from "./data";

/**
 * Orders component
 */
export default {
    page: {
        title: "Orders",
        meta: [{
            name: "description",
            content: appConfig.description,
        }, ],
    },
    components: {
        DatePicker,
        Layout,
        PageHeader,
    },
    data() {
        return {
            ordersData: ordersData,
            title: "Orders",
            items: [{
                    text: "Crypto",
                    href: "/",
                },
                {
                    text: "Orders",
                    active: true,
                },
            ],
            totalRows: 1,
            currentPage: 1,
            perPage: 10,
            pageOptions: [10, 25, 50, 100],
            filter: null,
            filterOn: [],
            sortBy: "value",
            sortDesc: false,
            fields: [{
                    key: "date",
                    sortable: true,
                },
                {
                    key: "type",
                    sortable: true,
                },
                {
                    key: "coin",
                    sortable: true,
                },
                {
                    key: "value",
                    sortable: true,
                },
                {
                    key: "usd",
                    sortable: true,
                },
                {
                    key: "status",
                    sortable: true,
                },
            ],
            coinvalue: "",
            statusValue: "",
            typeValue: null,
            datepickervalue: "",
        };
    },
    computed: {
        /**
         * Total no. of records
         */
        rows() {
            return this.ordersData.length;
        },
    },
    mounted() {
        // Set the initial number of items
        this.totalRows = this.items.length;
    },
    methods: {
        /**
         * Search the table data with search input
         */
        onFiltered(filteredItems) {
            // Trigger pagination to update the number of buttons/pages due to filtering
            this.totalRows = filteredItems.length;
            this.currentPage = 1;
        },
    },
};
</script>

<template lang="en">
<Layout>
    <PageHeader :title="title" :items="items" />
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <h4 class="card-title mb-3">Orders</h4>
                    <b-tabs content-class="p-3" nav-class="nav-tabs-custom">
                        <b-tab title="All Orders" active>
                            <form>
                                <div class="row">
                                    <div class="col-xl col-sm-6">
                                        <div class="form-group mt-3 mb-0">
                                            <label>Date :</label>
                                            <date-picker v-model="datepickervalue" :first-day-of-week="1" lang="en"></date-picker>
                                        </div>
                                    </div>

                                    <div class="col-xl col-sm-6">
                                        <div class="form-group mt-3 mb-0">
                                            <label>Coin</label>

                                            <b-form-select v-model="coinvalue" :options="['Ethereum', 'litecoin', 'Bitcoin']"></b-form-select>
                                        </div>
                                    </div>

                                    <div class="col-xl col-sm-6">
                                        <div class="form-group mt-3 mb-0">
                                            <label>Type</label>
                                            <b-form-select v-model="typeValue" :options="['Buy', 'Sell']"></b-form-select>
                                        </div>
                                    </div>

                                    <div class="col-xl col-sm-6">
                                        <div class="form-group mt-3 mb-0">
                                            <label>Status</label>
                                            <b-form-select v-model="statusValue" :options="['Completed', 'Pending']"></b-form-select>
                                        </div>
                                    </div>

                                    <div class="col-xl col-sm-6 align-self-end">
                                        <div class="mt-3">
                                            <button type="button" class="btn btn-primary w-md">
                                                Add Order
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </form>
                            <div class="row mt-4">
                                <div class="col-sm-12 col-md-6">
                                    <div id="tickets-table_length" class="dataTables_length">
                                        <label class="d-inline-flex align-items-center">
                                            Show&nbsp;
                                            <b-form-select v-model="perPage" size="sm" :options="pageOptions"></b-form-select>&nbsp;entries
                                        </label>
                                    </div>
                                </div>
                                <!-- Search -->
                                <div class="col-sm-12 col-md-6">
                                    <div id="tickets-table_filter" class="dataTables_filter text-md-right">
                                        <label class="d-inline-flex align-items-center">
                                            Search:
                                            <b-form-input v-model="filter" type="search" placeholder="Search..." class="form-control form-control-sm ml-2"></b-form-input>
                                        </label>
                                    </div>
                                </div>
                                <!-- End search -->
                            </div>
                            <!-- Table -->
                            <div class="table-responsive mt-3 mb-0">
                                <b-table :items="ordersData" :fields="fields" responsive="sm" :per-page="perPage" :current-page="currentPage" :sort-by.sync="sortBy" :sort-desc.sync="sortDesc" :filter="filter" :filter-included-fields="filterOn" @filtered="onFiltered"></b-table>
                            </div>
                            <div class="row">
                                <div class="col">
                                    <div class="dataTables_paginate paging_simple_numbers float-right">
                                        <ul class="pagination pagination-rounded mb-0">
                                            <!-- pagination -->
                                            <b-pagination v-model="currentPage" :total-rows="rows" :per-page="perPage"></b-pagination>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </b-tab>
                        <b-tab title="Processing">
                            <div class="row mt-3">
                                <div class="col-sm-12 col-md-6">
                                    <div id="tickets-table_length" class="dataTables_length">
                                        <label class="d-inline-flex align-items-center">
                                            Show&nbsp;
                                            <b-form-select v-model="perPage" size="sm" :options="pageOptions"></b-form-select>&nbsp;entries
                                        </label>
                                    </div>
                                </div>
                                <!-- Search -->
                                <div class="col-sm-12 col-md-6">
                                    <div id="tickets-table_filter" class="dataTables_filter text-md-right">
                                        <label class="d-inline-flex align-items-center">
                                            Search:
                                            <b-form-input v-model="filter" type="search" placeholder="Search..." class="form-control form-control-sm ml-2"></b-form-input>
                                        </label>
                                    </div>
                                </div>
                                <!-- End search -->
                            </div>
                            <div class="table-responsive mt-3 mb-0">
                                <b-table :items="ordersData" :fields="fields" responsive="sm" :per-page="perPage" :current-page="currentPage" :sort-by.sync="sortBy" :sort-desc.sync="sortDesc" :filter="filter" :filter-included-fields="filterOn" @filtered="onFiltered"></b-table>
                            </div>
                        </b-tab>
                    </b-tabs>
                </div>
            </div>
        </div>
    </div>
</Layout>
</template>

================
File: router/views/crypto/lending/index.vue
================
<script>
import Layout from "../../../layouts/main";
import appConfig from "@/app.config";
import PageHeader from "@/components/page-header";

/**
 * Lending component
 */
export default {
  page: {
    title: "Lending",
    meta: [{ name: "description", content: appConfig.description }]
  },
  components: { Layout, PageHeader },
  data() {
    return {
      title: "Lending",
      items: [
        {
          text: "Crypto",
          href: "/"
        },
        {
          text: "Lending",
          active: true
        }
      ]
    };
  }
};
</script>

<template>
  <Layout>
    <PageHeader :title="title" :items="items" />

    <div class="row">
      <div class="col-xl-4">
        <div class="card">
          <div class="card-body border-bottom">
            <b-dropdown
              class="float-right ml-2"
              toggle-class="text-muted p-0"
              right
              variant="white"
            >
              <template v-slot:button-content>
                <i class="mdi mdi-dots-horizontal font-size-18"></i>
              </template>
              <b-dropdown-item>Action</b-dropdown-item>
              <b-dropdown-item>Another action</b-dropdown-item>
              <b-dropdown-item>Something else here</b-dropdown-item>
            </b-dropdown>

            <div>
              <div class="mb-4 mr-3">
                <i class="mdi mdi-account-circle text-primary h1"></i>
              </div>

              <div>
                <h5 class>Henry Wells</h5>
                <p class="text-muted mb-1">henrywells@abc.com</p>
                <p class="text-muted mb-0">Id no: #SK0234</p>
              </div>
            </div>
          </div>
          <div class="card-body border-bottom">
            <div>
              <div class="row">
                <div class="col-sm-6">
                  <div>
                    <p class="text-muted mb-2">Available Balance</p>
                    <h5>$ 9148.00</h5>
                  </div>
                </div>
                <div class="col-sm-6">
                  <div class="text-sm-right mt-4 mt-sm-0">
                    <p class="text-muted mb-2">Since last month</p>
                    <h5>
                      + $ 215.53
                      <span class="badge badge-success ml-1 align-bottom">+ 1.3 %</span>
                    </h5>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="card">
          <div class="card-body">
            <h4 class="card-title mb-4">How it work</h4>

            <div>
              <ul class="verti-timeline list-unstyled">
                <li class="event-list">
                  <div class="event-timeline-dot">
                    <i class="bx bx-right-arrow-circle"></i>
                  </div>
                  <div class="media">
                    <div class="mr-3">
                      <i class="bx bx-user-plus h2 text-primary"></i>
                    </div>
                    <div class="media-body">
                      <div>
                        <h5 class="font-size-14">Register account</h5>
                        <p class="text-muted">
                          New common language will be more simple and regular
                          than the existing.
                        </p>
                      </div>
                    </div>
                  </div>
                </li>
                <li class="event-list">
                  <div class="event-timeline-dot">
                    <i class="bx bx-right-arrow-circle"></i>
                  </div>
                  <div class="media">
                    <div class="mr-3">
                      <i class="bx bx-copy-alt h2 text-primary"></i>
                    </div>
                    <div class="media-body">
                      <div>
                        <h5 class="font-size-14">Select Deposit</h5>
                        <p class="text-muted">
                          To achieve this, it would be necessary to have uniform
                          grammar.
                        </p>
                      </div>
                    </div>
                  </div>
                </li>

                <li class="event-list">
                  <div class="event-timeline-dot">
                    <i class="bx bx-right-arrow-circle"></i>
                  </div>
                  <div class="media">
                    <div class="mr-3">
                      <i class="bx bx-cloud-download h2 text-primary"></i>
                    </div>
                    <div class="media-body">
                      <div>
                        <h5 class="font-size-14">Get Earnings</h5>
                        <p class="text-muted">
                          New common language will be more simple and regular
                          than the existing.
                        </p>
                      </div>
                    </div>
                  </div>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>

      <div class="col-xl-8">
        <div class="card">
          <div class="card-body">
            <h4 class="card-title">Deposits</h4>

            <div class="row">
              <div class="col-lg-4">
                <div class="border p-3 rounded mt-4">
                  <div class="d-flex align-items-center mb-3">
                    <div class="avatar-xs mr-3">
                      <span
                        class="avatar-title rounded-circle bg-soft-warning text-warning font-size-18"
                      >
                        <i class="mdi mdi-bitcoin"></i>
                      </span>
                    </div>
                    <h5 class="font-size-14 mb-0">Bitcoin</h5>
                  </div>

                  <div class="row">
                    <div class="col-lg-6">
                      <div class="text-muted mt-3">
                        <p>Annual Yield</p>
                        <h4>4.05 %</h4>
                        <p class="mb-0">0.00745 BTC</p>
                      </div>
                    </div>

                    <div class="col-lg-6 align-self-end">
                      <div class="float-right mt-3">
                        <a href="javascript: void(0);" class="btn btn-primary">Select</a>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-lg-4">
                <div class="border p-3 rounded mt-4">
                  <div class="d-flex align-items-center mb-3">
                    <div class="avatar-xs mr-3">
                      <span
                        class="avatar-title rounded-circle bg-soft-primary text-primary font-size-18"
                      >
                        <i class="mdi mdi-ethereum"></i>
                      </span>
                    </div>
                    <h5 class="font-size-14 mb-0">Ethereum</h5>
                  </div>

                  <div class="row">
                    <div class="col-lg-6">
                      <div class="text-muted mt-3">
                        <p>Annual Yield</p>
                        <h4>5.08 %</h4>
                        <p class="mb-0">0.0056 ETH</p>
                      </div>
                    </div>

                    <div class="col-lg-6 align-self-end">
                      <div class="float-right mt-3">
                        <a href="javascript: void(0);" class="btn btn-primary">Select</a>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-lg-4">
                <div class="border p-3 rounded mt-4">
                  <div class="d-flex align-items-center mb-3">
                    <div class="avatar-xs mr-3">
                      <span class="avatar-title rounded-circle bg-soft-info text-info font-size-18">
                        <i class="mdi mdi-litecoin"></i>
                      </span>
                    </div>
                    <h5 class="font-size-14 mb-0">Litecoin</h5>
                  </div>

                  <div class="row">
                    <div class="col-lg-6">
                      <div class="text-muted mt-3">
                        <p>Annual Yield</p>
                        <h4>4.12 %</h4>
                        <p class="mb-0">0.00245 LTC</p>
                      </div>
                    </div>

                    <div class="col-lg-6 align-self-end">
                      <div class="float-right mt-3">
                        <a href="javascript: void(0);" class="btn btn-primary">Select</a>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="card">
          <div class="card-body">
            <h4 class="card-title mb-4">My Assets</h4>

            <div class="table-responsive mb-0">
              <table class="table table-nowrap table-centered">
                <thead>
                  <tr>
                    <th scope="col">Token</th>
                    <th scope="col">Price</th>
                    <th scope="col">Invest</th>
                    <th scope="col">Loans</th>
                    <th scope="col" colspan="2">Total</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <th scope="row">
                      <div class="d-flex align-items-center">
                        <div class="avatar-xs mr-3">
                          <span
                            class="avatar-title rounded-circle bg-soft-warning text-warning font-size-18"
                          >
                            <i class="mdi mdi-bitcoin"></i>
                          </span>
                        </div>
                        <span>BTC</span>
                      </div>
                    </th>
                    <td>
                      <div class="text-muted">$ 7525.47</div>
                    </td>
                    <td>
                      <h5 class="font-size-14 mb-1">1.2601</h5>
                      <div class="text-muted">$6225.74</div>
                    </td>
                    <td>
                      <h5 class="font-size-14 mb-1">0.1512</h5>
                      <div class="text-muted">$742.32</div>
                    </td>
                    <td>
                      <h5 class="font-size-14 mb-1">4.2562</h5>
                      <div class="text-muted">$6425.42</div>
                    </td>
                    <td style="width: 120px;">
                      <a href="javascript: void(0);" class="btn btn-primary btn-sm w-xs">View</a>
                    </td>
                  </tr>
                  <tr>
                    <th scope="row">
                      <div class="d-flex align-items-center">
                        <div class="avatar-xs mr-3">
                          <span
                            class="avatar-title rounded-circle bg-soft-primary text-primary font-size-18"
                          >
                            <i class="mdi mdi-ethereum"></i>
                          </span>
                        </div>
                        <span>ETH</span>
                      </div>
                    </th>
                    <td>
                      <div class="text-muted">$ 4235.78</div>
                    </td>
                    <td>
                      <h5 class="font-size-14 mb-1">0.0814</h5>
                      <div class="text-muted">$3256.29</div>
                    </td>
                    <td>
                      <h5 class="font-size-14 mb-1">0.0253</h5>
                      <div class="text-muted">$675.04</div>
                    </td>
                    <td>
                      <h5 class="font-size-14 mb-1">0.0921</h5>
                      <div class="text-muted">$4536.24</div>
                    </td>
                    <td>
                      <a href="javascript: void(0);" class="btn btn-primary btn-sm w-xs">View</a>
                    </td>
                  </tr>
                  <tr>
                    <th scope="row">
                      <div class="d-flex align-items-center">
                        <div class="avatar-xs mr-3">
                          <span
                            class="avatar-title rounded-circle bg-soft-info text-info font-size-18"
                          >
                            <i class="mdi mdi-litecoin"></i>
                          </span>
                        </div>
                        <span>LTC</span>
                      </div>
                    </th>
                    <td>
                      <div class="text-muted">$ 3726.06</div>
                    </td>
                    <td>
                      <h5 class="font-size-14 mb-1">0.0682</h5>
                      <div class="text-muted">$2936.14</div>
                    </td>
                    <td>
                      <h5 class="font-size-14 mb-1">0.0234</h5>
                      <div class="text-muted">$523.17</div>
                    </td>
                    <td>
                      <h5 class="font-size-14 mb-1">0.0823</h5>
                      <div class="text-muted">$3254.23</div>
                    </td>
                    <td>
                      <a href="javascript: void(0);" class="btn btn-primary btn-sm w-xs">View</a>
                    </td>
                  </tr>

                  <tr>
                    <th scope="row">
                      <div class="d-flex align-items-center">
                        <div class="avatar-xs mr-3">
                          <span
                            class="avatar-title rounded-circle bg-soft-warning text-warning font-size-18"
                          >
                            <i class="mdi mdi-bitcoin"></i>
                          </span>
                        </div>
                        <span>BTC</span>
                      </div>
                    </th>
                    <td>
                      <div class="text-muted">$ 7525.47</div>
                    </td>
                    <td>
                      <h5 class="font-size-14 mb-1">1.2601</h5>
                      <div class="text-muted">$6225.74</div>
                    </td>
                    <td>
                      <h5 class="font-size-14 mb-1">0.1512</h5>
                      <div class="text-muted">$742.32</div>
                    </td>
                    <td>
                      <h5 class="font-size-14 mb-1">4.2562</h5>
                      <div class="text-muted">$6425.42</div>
                    </td>
                    <td>
                      <a href="javascript: void(0);" class="btn btn-primary btn-sm w-xs">View</a>
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
    <!-- end row -->
  </Layout>
</template>
